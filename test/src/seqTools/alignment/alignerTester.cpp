#include <catch.hpp>

#include "../src/bibseq/alignment/aligner.hpp"
#include "../src/bibseq/simulation/randomStrGen.hpp"
#include "../src/bibseq/simulation/randomGenerator.hpp"
using namespace bibseq;

TEST_CASE("Basic tests for aligner", "[aligner]" ){
  SECTION("global alignVec constant gap pen"){
    gapScoringParameters gapParsOne(5.0,5.0);
    substituteMatrix blosum62;
    blosum62.setWtihBlosum62();
    aligner alignerObjTest = aligner(1000, gapParsOne, blosum62, true);
    std::string firstTest = "ILYPRQSMICMSFCFWDMWKKDVPVVLMMFLERRQMQSVFSWLVTVKTDCGKGIYNHRKYLGLPTMTAGDWHWIKKQNDPHEWFQGRLETAWLHSTFLYWKYFECDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIWMATDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVKNYMMAPVVNDPMIEAFYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMNTDPHYCQTHVCWISAMFPIYSPFYTSGPKEFYMWLQARIDQNMHGHANHYVTSGNWDSVYTPEKRAGVFPVVVPVWYPPQMCNDYIKLTYECERFHVEGTFGCNRWDLGCRRYIIFQCPYCDTMKICYVDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEWCNQPVLAKFVRSKIVAICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPTSHYVFMRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHHRRAFRAELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA";
    std::string secondTest = "ILIPRQQMGCFPFPWHFDFCFWSAHHSLVVPLNPQMQTVFQNRGLDRVTVKTDCHDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLYKKTEYCLVRHSNCCHCDWDQIIHTCAFIAFLDLYQRHWPMCDKLYCHFHHSWFCRNQEMSMDWNQWFPWDSVPRANCLEEGALIALYAGIWANSMKRDMKTDHACTVRLIYVCELHAWLKYCYTSINMLCGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQGICPVERKSHCEIYAKDLLSFESCCSQKQNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRPPKEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSYKLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWACEAQTNVCERMLNNQHVAVKRNVTFWWQMVPNCLWSCHNKMTWPTRPEQHRLFFVKMRLKCMHEYLDVAPSDFCRNMQAYMHSMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGYIYDQSLQVVSCEGCSYYADCYVKCINVKEKCMFA";
    baseReadObject firstTestObject(seqInfo("firstTest", firstTest));
    baseReadObject secondTestObject(seqInfo("secondTest", secondTest));
    alignerObjTest.alignVec(firstTestObject, secondTestObject, false);
    std::string ansA = "ILYPRQSMICMSFCF-WDM--WKKDVPVVLMMFLERRQMQSVF-S-WL--VTVKTDCGKGIYNHR-K--Y-LGLPTMTAGDWHWIKK---Q-NDPHEWFQGRLETAWLHSTFLYWKYFE-CDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIW---MA----TDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVKN-YMMAPVVNDPMIEA--FYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMN-TDPH----Y--CQTHVCW-ISAMF-PIYSPFYT--SG-PKEFYMW---LQARI-DQNM---HGHANHYV-TSGNWDSVYTPEKRA--G--V-FP-V-V-------VPVWYPPQMCN--D-YIKLTYEC--E---RFHVEGTFGCNRWD-L-GCRR--YII--FQCPYCDTMKI---CY--VDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEW-----CNQPVLAKFVRSKIVA---ICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPT--S-HYVF---MRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHH-RRAFRA----ELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA";
    std::string ansB = "ILIPRQQMGCFPFPWHFDFCFWSAHHSLVVP--LNP-QMQTVFQNRGLDRVTVKTDC----HDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLY-KKTEYC-LVR---HS-NCC-HCDWDQIIHTCAF-----IAFLDLYQRHWPMCDKLY------C---HFHHSWFCRNQEMSM--D---W---------N--Q---WFP-------WDSV-P-RANCLE-EGALIALYAGIWANSMKRDMKTDHACT--VRLIYVCELHAWLK-YCYTSINML-CGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQ------GICPVERKSHCEIYAKDLLSFESCCSQK-QNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRPP-KEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSY-KLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWA-C---EA---QTNVCERMLN-NQHVAV-KRNVTFWWQMVPNC----LWSCHNKMTWPTRPEQHRLFFVKMRLKCMH-----EYLD--VAPS--DFCRNMQAYMH-------SMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGY-I--------YDQSLQVVSCEGCSYYADCYVKCI-NVKEKCMFA";
    double ansScore = 1555;
    REQUIRE(ansA == alignerObjTest.alignObjectA_.seqBase_.seq_);
    REQUIRE(ansB == alignerObjTest.alignObjectB_.seqBase_.seq_);
    REQUIRE(ansScore == alignerObjTest.parts_.score_);
  }
  SECTION("local alignVec constant gap pen"){
    gapScoringParameters gapParsOne(5.0,5.0);
    substituteMatrix pam250;
    pam250.setWithPam250();
    aligner alignerObjTest = aligner(1000, gapParsOne, pam250, true);
    std::string firstTest = "AMTAFRYRQGNPRYVKHFAYEIRLSHIWLLTQMPWEFVMGIKMPEDVFQHWRVYSVCTAEPMRSDETYEQKPKPMAKWSGMTIMYQAGIIRQPPRGDRGVSDRNYSQCGKQNQAQLDNNPTWTKYEIEWRVQILPPGAGVFEGDNGQNQCLCPNWAWEQPCQWGALHSNEQYPNRIHLWAPMSKLHIKIEKSSYNRNAQFPNRCMYECEFPSYREQVDSCHYENVQIAFTIFSGAEQKRKFCSCHFWSNFIDQAVFSTGLIPWCYRRDDHSAFFMPNWNKQYKHPQLQFRVAGEGTQCRPFYTREMFTKVSAWRIAGRFAGPYERHHDAHLELWYQHHKVRTGQQLGIIWNNRDKTRNPCPFSAYYNKLPWWKINQNAFYNCLQNIAHSTHDETHEFNPVKCIDWLQGTMVPTECKKGFVHEKCECYRNPGPPLHDMYHQMEDIFGVRFDCLTGWKHLSDYNPCQERRNINDFYIFAYEIAPAVKNLVLSPQPLADATKKCAFNYTPLDQSPVVIACKWYIHQPICMLLIVLICAMDKYNAHMIVIRTTEGQQPMHACRMTEGPGMCMKEPLVTFTLPAQWQWPNHEFKYVYMYVLNYHLSQYTYTDEGHAGGQHYSFNVAVDVGMAWGHNRCYCQPACYSQQETQTRTIDYEKWQYMKHQAFKWGLWFCEQERHAWFKGQNRCEMFTAKMTRMGADSNLDQYKLMLAQNYEEQWEQPIMECGMSEIIEIDPPYRSELIFTFWPFCTYSPWQNLIKCRCNNVIEEMDQCVPLTFIGFGVKQAGGIQAWAFYKEEWTSTYYLMCQCMKSDKAQYPYEIILFWMQPMDTGEQEPPQQNMWIFLPHSWFFDWCCNAPWSEICSSRHDHGQCQDAFYPCELFTVFDDIFTAEPVVCSCFYDDPM";
    std::string secondTest = "WQEKAVDGTVPSRHQYREKEDRQGNEIGKEFRRGPQVCEYSCNSHSCGWMPIFCIVCMSYVAFYCGLEYPMSRKTAKSQFIEWCDWFCFNHWTNWAPLSIVRTSVAFAVWGHCWYPCGGVCKTNRCKDDFCGRWRKALFAEGPRDWKCCKNDLQNWNPQYSQGTRNTKRMVATTNQTMIEWKQSHIFETWLFCHVIIEYNWSAFWMWMNRNEAFNSIIKSGYPKLLLTQYPLSQGSTPIVKPLIRRDQGKFWAWAQMWWFREPTNIPTADYCHSWWQSRADLQNDRDMGPEADASFYVEFWYWVRCAARTYGQQLGIIWNNRLKTRNPCPYSADGIQNKENYVFWWKNMCTKSHIAFYYCLQNVAHYTHDVTAEFNPVKCIDWLQGHMVLSSWFKYNTECKKLFVHEKCECYRMFCGVVEDIFGVRFHTGWKHLSTAKPVPHVCVYNPSVQERRNINDFYIFYEIAPAVKNLVLSAQPLHDYTKKCAFNYTPITITRIISTRNQIIWAHVVIACQFYSPHQMLLIELAMDKYCADMNVRRSTEGHQPMHACRSTFGPGMAAKEPLVTFTLVAFWQWPNHEFQYVYMYTEDKIIQIGPHLSNGCEMVEYCVDCYAKRPCYRAYSAEAQYWRMITEAEDYSYKTRNAIAATATVRGQYCHPFRWLGIVWMAHHDCFFANECGTICIPQMAEMRPPETTPYEIDIIFMMFWKEHMSTTILDVVGMYRPATFSHWHDAHHQCEPYLTPLMCQSKLVFDAAFTQVGVKGVWYHTEKLELMAGFNHMKFKKEEAQQSCFYWFQDCPDYDPPDAVRKTDEKHIRAHGEIWWLMRYYCMYHILHIASRHEWMHLRWDQACTNPGYELFEFIPWVLRRYVVYDKIRYNYSYRNSASMEFV";
    baseReadObject firstTestObject(seqInfo("firstTest", firstTest));
    baseReadObject secondTestObject(seqInfo("secondTest", secondTest));
    alignerObjTest.alignVec(firstTestObject, secondTestObject, true);
    std::string ansA = "YQAGIIRQPPRGD-RGVSDRNYSQCGKQ-NQ-AQLDNNPTWTKYEIEWRVQI-LPPGAGVFEGDNGQNQCLCPNW--A-W-EQPCQW----GALHS-NEQYPNRIHLWAPMSKLHIKIEKSSYN-RNAQ-FPNRCMYECE-FPSY-REQVDSCHYENVQIAF-TIFSGAEQKRKFCSCHFWSNFIDQAVFSTGLI-PWCYRRDDHSAFFMPNWNKQ--YKHPQLQFRVAGEGTQCRPFYTREMFTKVSAWRIAGRFAGPYERHHDAHLELWY-QHHKVRT-GQQLGIIWNNRDKTRNPCPFSAY-Y-NK--LP-WWK-I-NQ-N-AFYNCLQNIAHSTHDETHEFNPVKCIDWLQGTMV-P------TECKKGFVHEKCECYRNPGPPLHDMYHQMEDIFGVRFDCLTGWKHLS------D---YNPC-QERRNINDFYIFAYEIAPAVKNLVLSPQPLADATKKCAFNYTPLDQSPVVIACK---WYIHQPI-CMLL----IVLIC-AMDKYNAHMIVIRTTEGQQPMHACRMTEGPGMCMKEPLVTFTLPAQWQWPNHEFKYVYMYVLNYHLSQYTYTDEGHAGGQHYSFNVAVDVGMAWGHNRCYCQPACYSQQETQTRTIDYEKWQYMKHQAFKWGLWFCEQER-HA--WFKGQNRCEMFTAKMTRMGADSNLDQYKLMLAQNYEEQWEQPIMECGMSEIIEIDPPYRSELIFTFWPFCTYSPWQNLIKCRCNNVIEEMDQCVP-LTF-IGFGVKQAGGIQA-WAFYKE--EWTSTYYLMCQCMKSDKAQYPYEIILFWMQ--P-MDTGE--QEPPQQNMWIFLPHSWFFDWCCNAPWSEICSSRHD--H---GQ-CQDAFYPCELFTVF";
    std::string ansB = "Y-P-MSRKTAKSQFIEWCDW-F--CFNHWTNWAPLSIVRTSVAFAV-W-GHCWYPCG-GVCKTNRCKDD-FCGRWRKALFAEGPRDWKCCKNDLQNWNPQYSQGTR--NTK-RMVATTNQTMIEWKQSHIFETW-LF-CHVIIEYNWSAF-W-MWMNRNEAFNSIIKSGYPKLLL-T-QY-P-L-SQG--STPIVKPL-IRRD-QGKFW-A-WAQMWWFREPT-NIPTA-D-Y-CHSW--WQ--SR-ADLQ-NDRDMGP-EADASFYVEFWYWVRCAARTYGQQLGIIWNNRLKTRNPCPYSADGIQNKENYVFWWKNMCTKSHIAFYYCLQNVAHYTHDVTAEFNPVKCIDWLQGHMVLSSWFKYNTECKKLFVHEKCECYRM----FCGV---VEDIFGVRFH--TGWKHLSTAKPVPHVCVYNPSVQERRNINDFYIF-YEIAPAVKNLVLSAQPLHDYTKKCAFNYTPITITRIISTRNQIIW-AHVVIACQFYSPHQMLLIELAMDKYCADMNVRRSTEGHQPMHACRSTFGPGMAAKEPLVTFTLVAFWQWPNHEFQYVYMYTED-KIIQIG-PHLSN-GCEMVEYCVDC-YAK-RPCYRAYSAEAQYWRMITEAEDYSYKTRNAIAATATVRGQ-YCHPFRWLGIVWM-AHHDC-FFANECGTICI-PQMAEMRPPETTPYEI--DIIFMMF-WKE--HMSTTIL-DVVGMYRP-ATFSHWHDAHH-QCEPYLTPL-MCQSKLVFDAAFT--QVG-VKGVW-YHTEKLELMAGFNHM-K-FKKEEAQ---QSCFYWFQDCPDYDPPDAVRKTDEKHIRAHGEIWWLMRYYCMYHILHI-ASRHEWMHLRWDQACTNPGY--ELFE-F";
    double ansScore = 1062;
    REQUIRE(ansA == alignerObjTest.alignObjectA_.seqBase_.seq_);
    REQUIRE(ansB == alignerObjTest.alignObjectB_.seqBase_.seq_);
    REQUIRE(ansScore == alignerObjTest.parts_.score_);
  }


  SECTION("local alignReg constant gap pen"){
    gapScoringParameters gapParsOne(5.0,5.0);
    substituteMatrix pam250;
    pam250.setWithPam250();
    aligner alignerObjTest = aligner(1000, gapParsOne, pam250, true);
    std::string firstTest = "AMTAFRYRQGNPRYVKHFAYEIRLSHIWLLTQMPWEFVMGIKMPEDVFQHWRVYSVCTAEPMRSDETYEQKPKPMAKWSGMTIMYQAGIIRQPPRGDRGVSDRNYSQCGKQNQAQLDNNPTWTKYEIEWRVQILPPGAGVFEGDNGQNQCLCPNWAWEQPCQWGALHSNEQYPNRIHLWAPMSKLHIKIEKSSYNRNAQFPNRCMYECEFPSYREQVDSCHYENVQIAFTIFSGAEQKRKFCSCHFWSNFIDQAVFSTGLIPWCYRRDDHSAFFMPNWNKQYKHPQLQFRVAGEGTQCRPFYTREMFTKVSAWRIAGRFAGPYERHHDAHLELWYQHHKVRTGQQLGIIWNNRDKTRNPCPFSAYYNKLPWWKINQNAFYNCLQNIAHSTHDETHEFNPVKCIDWLQGTMVPTECKKGFVHEKCECYRNPGPPLHDMYHQMEDIFGVRFDCLTGWKHLSDYNPCQERRNINDFYIFAYEIAPAVKNLVLSPQPLADATKKCAFNYTPLDQSPVVIACKWYIHQPICMLLIVLICAMDKYNAHMIVIRTTEGQQPMHACRMTEGPGMCMKEPLVTFTLPAQWQWPNHEFKYVYMYVLNYHLSQYTYTDEGHAGGQHYSFNVAVDVGMAWGHNRCYCQPACYSQQETQTRTIDYEKWQYMKHQAFKWGLWFCEQERHAWFKGQNRCEMFTAKMTRMGADSNLDQYKLMLAQNYEEQWEQPIMECGMSEIIEIDPPYRSELIFTFWPFCTYSPWQNLIKCRCNNVIEEMDQCVPLTFIGFGVKQAGGIQAWAFYKEEWTSTYYLMCQCMKSDKAQYPYEIILFWMQPMDTGEQEPPQQNMWIFLPHSWFFDWCCNAPWSEICSSRHDHGQCQDAFYPCELFTVFDDIFTAEPVVCSCFYDDPM";
    std::string secondTest = "WQEKAVDGTVPSRHQYREKEDRQGNEIGKEFRRGPQVCEYSCNSHSCGWMPIFCIVCMSYVAFYCGLEYPMSRKTAKSQFIEWCDWFCFNHWTNWAPLSIVRTSVAFAVWGHCWYPCGGVCKTNRCKDDFCGRWRKALFAEGPRDWKCCKNDLQNWNPQYSQGTRNTKRMVATTNQTMIEWKQSHIFETWLFCHVIIEYNWSAFWMWMNRNEAFNSIIKSGYPKLLLTQYPLSQGSTPIVKPLIRRDQGKFWAWAQMWWFREPTNIPTADYCHSWWQSRADLQNDRDMGPEADASFYVEFWYWVRCAARTYGQQLGIIWNNRLKTRNPCPYSADGIQNKENYVFWWKNMCTKSHIAFYYCLQNVAHYTHDVTAEFNPVKCIDWLQGHMVLSSWFKYNTECKKLFVHEKCECYRMFCGVVEDIFGVRFHTGWKHLSTAKPVPHVCVYNPSVQERRNINDFYIFYEIAPAVKNLVLSAQPLHDYTKKCAFNYTPITITRIISTRNQIIWAHVVIACQFYSPHQMLLIELAMDKYCADMNVRRSTEGHQPMHACRSTFGPGMAAKEPLVTFTLVAFWQWPNHEFQYVYMYTEDKIIQIGPHLSNGCEMVEYCVDCYAKRPCYRAYSAEAQYWRMITEAEDYSYKTRNAIAATATVRGQYCHPFRWLGIVWMAHHDCFFANECGTICIPQMAEMRPPETTPYEIDIIFMMFWKEHMSTTILDVVGMYRPATFSHWHDAHHQCEPYLTPLMCQSKLVFDAAFTQVGVKGVWYHTEKLELMAGFNHMKFKKEEAQQSCFYWFQDCPDYDPPDAVRKTDEKHIRAHGEIWWLMRYYCMYHILHIASRHEWMHLRWDQACTNPGYELFEFIPWVLRRYVVYDKIRYNYSYRNSASMEFV";
    baseReadObject firstTestObject(seqInfo("firstTest", firstTest));
    baseReadObject secondTestObject(seqInfo("secondTest", secondTest));
    alignerObjTest.alignReg(firstTestObject, secondTestObject, true);
    std::string ansA = "YQAGIIRQPPRGD-RGVSDRNYSQCGKQ-NQ-AQLDNNPTWTKYEIEWRVQI-LPPGAGVFEGDNGQNQCLCPNW--A-W-EQPCQW----GALHS-NEQYPNRIHLWAPMSKLHIKIEKSSYN-RNAQ-FPNRCMYECE-FPSY-REQVDSCHYENVQIAF-TIFSGAEQKRKFCSCHFWSNFIDQAVFSTGLI-PWCYRRDDHSAFFMPNWNKQ--YKHPQLQFRVAGEGTQCRPFYTREMFTKVSAWRIAGRFAGPYERHHDAHLELWY-QHHKVRT-GQQLGIIWNNRDKTRNPCPFSAY-Y-NK--LP-WWK-I-NQ-N-AFYNCLQNIAHSTHDETHEFNPVKCIDWLQGTMV-P------TECKKGFVHEKCECYRNPGPPLHDMYHQMEDIFGVRFDCLTGWKHLS------D---YNPC-QERRNINDFYIFAYEIAPAVKNLVLSPQPLADATKKCAFNYTPLDQSPVVIACK---WYIHQPI-CMLL----IVLIC-AMDKYNAHMIVIRTTEGQQPMHACRMTEGPGMCMKEPLVTFTLPAQWQWPNHEFKYVYMYVLNYHLSQYTYTDEGHAGGQHYSFNVAVDVGMAWGHNRCYCQPACYSQQETQTRTIDYEKWQYMKHQAFKWGLWFCEQER-HA--WFKGQNRCEMFTAKMTRMGADSNLDQYKLMLAQNYEEQWEQPIMECGMSEIIEIDPPYRSELIFTFWPFCTYSPWQNLIKCRCNNVIEEMDQCVP-LTF-IGFGVKQAGGIQA-WAFYKE--EWTSTYYLMCQCMKSDKAQYPYEIILFWMQ--P-MDTGE--QEPPQQNMWIFLPHSWFFDWCCNAPWSEICSSRHD--H---GQ-CQDAFYPCELFTVF";
    std::string ansB = "Y-P-MSRKTAKSQFIEWCDW-F--CFNHWTNWAPLSIVRTSVAFAV-W-GHCWYPCG-GVCKTNRCKDD-FCGRWRKALFAEGPRDWKCCKNDLQNWNPQYSQGTR--NTK-RMVATTNQTMIEWKQSHIFETW-LF-CHVIIEYNWSAF-W-MWMNRNEAFNSIIKSGYPKLLL-T-QY-P-L-SQG--STPIVKPL-IRRD-QGKFW-A-WAQMWWFREPT-NIPTA-D-Y-CHSW--WQ--SR-ADLQ-NDRDMGP-EADASFYVEFWYWVRCAARTYGQQLGIIWNNRLKTRNPCPYSADGIQNKENYVFWWKNMCTKSHIAFYYCLQNVAHYTHDVTAEFNPVKCIDWLQGHMVLSSWFKYNTECKKLFVHEKCECYRM----FCGV---VEDIFGVRFH--TGWKHLSTAKPVPHVCVYNPSVQERRNINDFYIF-YEIAPAVKNLVLSAQPLHDYTKKCAFNYTPITITRIISTRNQIIW-AHVVIACQFYSPHQMLLIELAMDKYCADMNVRRSTEGHQPMHACRSTFGPGMAAKEPLVTFTLVAFWQWPNHEFQYVYMYTED-KIIQIG-PHLSN-GCEMVEYCVDC-YAK-RPCYRAYSAEAQYWRMITEAEDYSYKTRNAIAATATVRGQ-YCHPFRWLGIVWM-AHHDC-FFANECGTICI-PQMAEMRPPETTPYEI--DIIFMMF-WKE--HMSTTIL-DVVGMYRP-ATFSHWHDAHH-QCEPYLTPL-MCQSKLVFDAAFT--QVG-VKGVW-YHTEKLELMAGFNHM-K-FKKEEAQ---QSCFYWFQDCPDYDPPDAVRKTDEKHIRAHGEIWWLMRYYCMYHILHI-ASRHEWMHLRWDQACTNPGY--ELFE-F";
    double ansScore = 1062;
    REQUIRE(ansA == alignerObjTest.alignObjectA_.seqBase_.seq_);
    REQUIRE(ansB == alignerObjTest.alignObjectB_.seqBase_.seq_);
    REQUIRE(ansScore == alignerObjTest.parts_.score_);
  }
  
  SECTION("global alignReg constant gap pen"){
    gapScoringParameters gapParsOne(5.0,5.0);
    substituteMatrix blosum62;
    blosum62.setWtihBlosum62();
    aligner alignerObjTest = aligner(1000, gapParsOne, blosum62, true);
    std::string firstTest = "ILYPRQSMICMSFCFWDMWKKDVPVVLMMFLERRQMQSVFSWLVTVKTDCGKGIYNHRKYLGLPTMTAGDWHWIKKQNDPHEWFQGRLETAWLHSTFLYWKYFECDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIWMATDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVKNYMMAPVVNDPMIEAFYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMNTDPHYCQTHVCWISAMFPIYSPFYTSGPKEFYMWLQARIDQNMHGHANHYVTSGNWDSVYTPEKRAGVFPVVVPVWYPPQMCNDYIKLTYECERFHVEGTFGCNRWDLGCRRYIIFQCPYCDTMKICYVDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEWCNQPVLAKFVRSKIVAICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPTSHYVFMRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHHRRAFRAELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA";
    std::string secondTest = "ILIPRQQMGCFPFPWHFDFCFWSAHHSLVVPLNPQMQTVFQNRGLDRVTVKTDCHDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLYKKTEYCLVRHSNCCHCDWDQIIHTCAFIAFLDLYQRHWPMCDKLYCHFHHSWFCRNQEMSMDWNQWFPWDSVPRANCLEEGALIALYAGIWANSMKRDMKTDHACTVRLIYVCELHAWLKYCYTSINMLCGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQGICPVERKSHCEIYAKDLLSFESCCSQKQNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRPPKEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSYKLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWACEAQTNVCERMLNNQHVAVKRNVTFWWQMVPNCLWSCHNKMTWPTRPEQHRLFFVKMRLKCMHEYLDVAPSDFCRNMQAYMHSMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGYIYDQSLQVVSCEGCSYYADCYVKCINVKEKCMFA";
    baseReadObject firstTestObject(seqInfo("firstTest", firstTest));
    baseReadObject secondTestObject(seqInfo("secondTest", secondTest));
    alignerObjTest.alignReg(firstTestObject, secondTestObject, false);
    std::string ansA = "ILYPRQSMICMSFCF-WDM--WKKDVPVVLMMFLERRQMQSVF-S-WL--VTVKTDCGKGIYNHR-K--Y-LGLPTMTAGDWHWIKK---Q-NDPHEWFQGRLETAWLHSTFLYWKYFE-CDAVKVCMDTFGLFGHCDWDQQIHTCTHENEPAIAFLDLYCRHSPMCDKLYPVWDMACQTCHFHHSWFCRNQEMWMKGDVDDWQWGYHYHTINSAQCNQWFKEICKDMGWDSVFPPRHNCQRHKKCMPALYAGIW---MA----TDHACTFMVRLIYTENIAEWHQVYCYRSMNMFTCGNVCLRCKSWIFVKN-YMMAPVVNDPMIEA--FYKRCCILGKAWYDMWGICPVERKSHWEIYAKDLLSFESCCSQKKQNCYTDNWGLEYRLFFQSIQMN-TDPH----Y--CQTHVCW-ISAMF-PIYSPFYT--SG-PKEFYMW---LQARI-DQNM---HGHANHYV-TSGNWDSVYTPEKRA--G--V-FP-V-V-------VPVWYPPQMCN--D-YIKLTYEC--E---RFHVEGTFGCNRWD-L-GCRR--YII--FQCPYCDTMKI---CY--VDQWRSIKEGQFRMSGYPNHGYWFVHDDHTNEW-----CNQPVLAKFVRSKIVA---ICKKSQTVFHYAYTPGYNATWPQTNVCERMYGPHDNLLNNQQNVTFWWKMVPNCGMQILISCHNKMKWPT--S-HYVF---MRLKCMHVLMQMEYLDHFTGPGEGDFCRNMQPYMHQDLHWEGSMRAILEYQAEHH-RRAFRA----ELCAQYDQEIILWSGGWGVQDCGFHANYDGSLQVVSGEPCSMWCTTVMQYYADCWEKCMFA";
    std::string ansB = "ILIPRQQMGCFPFPWHFDFCFWSAHHSLVVP--LNP-QMQTVFQNRGLDRVTVKTDC----HDHRWKWIYNLGLPTMTAGDWHFIKKHVVRANNPHQWFQGRLTTAWLHSTFLY-KKTEYC-LVR---HS-NCC-HCDWDQIIHTCAF-----IAFLDLYQRHWPMCDKLY------C---HFHHSWFCRNQEMSM--D---W---------N--Q---WFP-------WDSV-P-RANCLE-EGALIALYAGIWANSMKRDMKTDHACT--VRLIYVCELHAWLK-YCYTSINML-CGNVCLRCKSWIFVKLFYMYAPVVNTIEANSPHYYKRCCILGQ------GICPVERKSHCEIYAKDLLSFESCCSQK-QNCYTDNWGLEYRLFFQHIQMECTDPHANRGWTSCQTAKYWHFNLDDRPP-KEFYMWLQATPTDLCMYQHCLMFKIVKQNFRKQHGHANPAASTSGNWDSVYTPEKMAYKDWYVSHPPVDMRRNGSKMVPVWYPPGIWHWKQSY-KLTYECFFTVPGRFHVEGTFGCNRWDHQPGTRRDRQANHQFQCPYSDTMAIWEHAYTYVDQWRSIKEGQMPMSGYPNHGQWNVHDDHTNEQERSPICNQPVLAKFVRSKNVSNHEICKKSQTVFHWA-C---EA---QTNVCERMLN-NQHVAV-KRNVTFWWQMVPNC----LWSCHNKMTWPTRPEQHRLFFVKMRLKCMH-----EYLD--VAPS--DFCRNMQAYMH-------SMRAILEYQADFDLKRRLRAIAPMDLCAQYDQEIILWSGGY-I--------YDQSLQVVSCEGCSYYADCYVKCI-NVKEKCMFA";
    double ansScore = 1555;
    REQUIRE(ansA == alignerObjTest.alignObjectA_.seqBase_.seq_);
    REQUIRE(ansB == alignerObjTest.alignObjectB_.seqBase_.seq_);
    REQUIRE(ansScore == alignerObjTest.parts_.score_);
  }
  SECTION ("global alignVec affine gap pen"){
    gapScoringParameters gapParsOne(11.0,1.0);
    substituteMatrix blosum62;
    blosum62.setWtihBlosum62();
    aligner alignerObjTest = aligner(1000, gapParsOne, blosum62, true);
    std::string firstTest = "YHFDVPDCWAHRYWVENPQAIAQMEQICFNWFPSMMMKQPHVFKVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE";
    std::string secondTest = "YHEDVAHEDAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPIISATCARMRVRTVWE";
    baseReadObject firstTestObject(seqInfo("firstTest", firstTest));
    baseReadObject secondTestObject(seqInfo("secondTest", secondTest));
    alignerObjTest.alignVec(firstTestObject, secondTestObject, false);
    std::string ansA = "YHFDVPDCWAHRYWVENPQAIAQME-------QICFNWFPSMMMK-------QPHVFKV---DHHMSCRWLPIRGKKCSSCCTRMRVRTVWE";
    std::string ansB = "YHEDV----AHE------DAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPI----ISATCARMRVRTVWE";
    double ansScore = 144;
    REQUIRE(ansA == alignerObjTest.alignObjectA_.seqBase_.seq_);
    REQUIRE(ansB == alignerObjTest.alignObjectB_.seqBase_.seq_);
    REQUIRE(ansScore == alignerObjTest.parts_.score_);
  }
  SECTION ("global alignReg affine gap pen"){
    gapScoringParameters gapParsOne(11.0,1.0);
    substituteMatrix blosum62;
    blosum62.setWtihBlosum62();
    aligner alignerObjTest = aligner(1000, gapParsOne, blosum62, true);
    std::string firstTest = "YHFDVPDCWAHRYWVENPQAIAQMEQICFNWFPSMMMKQPHVFKVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE";
    std::string secondTest = "YHEDVAHEDAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPIISATCARMRVRTVWE";
    baseReadObject firstTestObject(seqInfo("firstTest", firstTest));
    baseReadObject secondTestObject(seqInfo("secondTest", secondTest));
    alignerObjTest.alignReg(firstTestObject, secondTestObject, false);
    std::string ansA = "YHFDVPDCWAHRYWVENPQAIAQME-------QICFNWFPSMMMK-------QPHVFKV---DHHMSCRWLPIRGKKCSSCCTRMRVRTVWE";
    std::string ansB = "YHEDV----AHE------DAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPI----ISATCARMRVRTVWE";
    double ansScore = 144;
    REQUIRE(ansA == alignerObjTest.alignObjectA_.seqBase_.seq_);
    REQUIRE(ansB == alignerObjTest.alignObjectB_.seqBase_.seq_);
    REQUIRE(ansScore == alignerObjTest.parts_.score_);
  }
  
  SECTION ("local alignVec affine gap pen"){
    gapScoringParameters gapParsOne(11.0,1.0);
    substituteMatrix blosum62;
    blosum62.setWtihBlosum62();
    aligner alignerObjTest = aligner(1000, gapParsOne, blosum62, true);
    std::string firstTest = "YHFDVPDCWAHRYWVENPQAIAQMEQICFNWFPSMMMKQPHVFKVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE";
    std::string secondTest = "AHEDAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPIISATCARMRVRTVWE";
    baseReadObject firstTestObject(seqInfo("firstTest", firstTest));
    baseReadObject secondTestObject(seqInfo("secondTest", secondTest));
    alignerObjTest.alignVec(firstTestObject, secondTestObject, true);
    std::string ansA = "AIAQME-------QICFNWFPSMMMK-------QPHVFKV---DHHMSCRWLPIRGKKCSSCCTRMRVRTVWE";
    std::string ansB = "AIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPI----ISATCARMRVRTVWE";
    double ansScore = 140;
    REQUIRE(ansA == alignerObjTest.alignObjectA_.seqBase_.seq_);
    REQUIRE(ansB == alignerObjTest.alignObjectB_.seqBase_.seq_);
    REQUIRE(ansScore == alignerObjTest.parts_.score_);
  }
  
  SECTION ("local alignReg affine gap pen"){
    gapScoringParameters gapParsOne(11.0,1.0);
    substituteMatrix blosum62;
    blosum62.setWtihBlosum62();
    aligner alignerObjTest = aligner(1000, gapParsOne, blosum62, true );
    std::string firstTest = "YHFDVPDCWAHRYWVENPQAIAQMEQICFNWFPSMMMKQPHVFKVDHHMSCRWLPIRGKKCSSCCTRMRVRTVWE";
    std::string secondTest = "AHEDAIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPIISATCARMRVRTVWE";
    baseReadObject firstTestObject(seqInfo("firstTest", firstTest));
    baseReadObject secondTestObject(seqInfo("secondTest", secondTest));
    alignerObjTest.alignReg(firstTestObject, secondTestObject, true);
    std::string ansA = "AIAQME-------QICFNWFPSMMMK-------QPHVFKV---DHHMSCRWLPIRGKKCSSCCTRMRVRTVWE";
    std::string ansB = "AIAQMVNTFGFVWQICLNQFPSMMMKIYWIAVLSAHVADRKTWSKHMSCRWLPI----ISATCARMRVRTVWE";
    double ansScore = 140;
    REQUIRE(ansA == alignerObjTest.alignObjectA_.seqBase_.seq_);
    REQUIRE(ansB == alignerObjTest.alignObjectB_.seqBase_.seq_);
    REQUIRE(ansScore == alignerObjTest.parts_.score_);
  }
  SECTION ("local aignReg vs alignVec agreement"){
    gapScoringParameters gapParsOne(5.0,1.0);
    aligner alignerObjTestVec = aligner(1000, gapParsOne, substituteMatrix(2, -2), true);
    aligner alignerObjTestReg = aligner(1000, gapParsOne, substituteMatrix(2, -2), true);
    randomGenerator rGen;
    VecStr randomsOne = simulation::evenRandStrsRandLen(300, 600,
                                                        getUpperCaseLetters(),
                                                        rGen, 1000);
    VecStr randomsTwo = simulation::evenRandStrsRandLen(300, 600,
                                                        getUpperCaseLetters(),
                                                        rGen, 1000);
    for (auto i : iter::range(randomsOne.size())){
      baseReadObject firstTestObject(seqInfo("firstTest", randomsOne[i]));
      baseReadObject secondTestObject(seqInfo("secondTest", randomsTwo[i]));
      alignerObjTestVec.alignVec(firstTestObject, secondTestObject, true);
      alignerObjTestReg.alignReg(firstTestObject, secondTestObject, true);
      REQUIRE(alignerObjTestReg.alignObjectA_.seqBase_.seq_ == alignerObjTestVec.alignObjectA_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.alignObjectB_.seqBase_.seq_ == alignerObjTestVec.alignObjectB_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.parts_.score_ == alignerObjTestVec.parts_.score_);
    }
  }
  SECTION ("global aignReg vs alignVec agreement"){
  	gapScoringParameters gapParsOne(5.0,1.0);
    aligner alignerObjTestVec = aligner(1000, gapParsOne, substituteMatrix(2, -2), true);
    aligner alignerObjTestReg = aligner(1000, gapParsOne, substituteMatrix(2, -2), true);
    randomGenerator rGen;
    VecStr randomsOne = simulation::evenRandStrsRandLen(300, 600,
                                                        getUpperCaseLetters(),
                                                        rGen, 1000);
    VecStr randomsTwo = simulation::evenRandStrsRandLen(300, 600,
                                                        getUpperCaseLetters(),
                                                        rGen, 1000);
    for (auto i : iter::range(randomsOne.size())){
      baseReadObject firstTestObject(seqInfo("firstTest", randomsOne[i]));
      baseReadObject secondTestObject(seqInfo("secondTest", randomsTwo[i]));
      alignerObjTestVec.alignVec(firstTestObject, secondTestObject, false);
      alignerObjTestReg.alignReg(firstTestObject, secondTestObject, false);
      REQUIRE(alignerObjTestReg.alignObjectA_.seqBase_.seq_ == alignerObjTestVec.alignObjectA_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.alignObjectB_.seqBase_.seq_ == alignerObjTestVec.alignObjectB_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.parts_.score_ == alignerObjTestVec.parts_.score_);
    }
  }
  SECTION ("local aignReg vs alignVec agreement twice through"){
  	gapScoringParameters gapParsOne(5.0,1.0);
    aligner alignerObjTestVec = aligner(1000, gapParsOne, substituteMatrix(2, -2), true);
    aligner alignerObjTestReg = aligner(1000, gapParsOne, substituteMatrix(2, -2), true);
    randomGenerator rGen;
    VecStr randomsOne = simulation::evenRandStrsRandLen(300, 600,
                                                        getUpperCaseLetters(),
                                                        rGen, 1000);
    VecStr randomsTwo = simulation::evenRandStrsRandLen(300, 600,
                                                        getUpperCaseLetters(),
                                                        rGen, 1000);
    for (auto i : iter::range(randomsOne.size())){
      baseReadObject firstTestObject(seqInfo("firstTest", randomsOne[i]));
      baseReadObject secondTestObject(seqInfo("secondTest", randomsTwo[i]));
      alignerObjTestVec.alignVec(firstTestObject, secondTestObject, true);
      alignerObjTestReg.alignReg(firstTestObject, secondTestObject, true);
      REQUIRE(alignerObjTestReg.alignObjectA_.seqBase_.seq_ == alignerObjTestVec.alignObjectA_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.alignObjectB_.seqBase_.seq_ == alignerObjTestVec.alignObjectB_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.parts_.score_ == alignerObjTestVec.parts_.score_);
    }
    for (auto i : iter::range(randomsOne.size())){
      baseReadObject firstTestObject(seqInfo("firstTest", randomsOne[i]));
      baseReadObject secondTestObject(seqInfo("secondTest", randomsTwo[i]));
      alignerObjTestVec.alignVec(firstTestObject, secondTestObject, true);
      alignerObjTestReg.alignReg(firstTestObject, secondTestObject, true);
      REQUIRE(alignerObjTestReg.alignObjectA_.seqBase_.seq_ == alignerObjTestVec.alignObjectA_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.alignObjectB_.seqBase_.seq_ == alignerObjTestVec.alignObjectB_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.parts_.score_ == alignerObjTestVec.parts_.score_);
    }
  }
  SECTION ("global aignReg vs alignVec agreement twice through"){
  	gapScoringParameters gapParsOne(5.0,1.0);
    aligner alignerObjTestVec = aligner(1000, gapParsOne, substituteMatrix(2, -2), true);
    aligner alignerObjTestReg = aligner(1000, gapParsOne, substituteMatrix(2, -2), true);
    randomGenerator rGen;
    VecStr randomsOne = simulation::evenRandStrsRandLen(300, 600,
                                                        getUpperCaseLetters(),
                                                        rGen, 1000);
    VecStr randomsTwo = simulation::evenRandStrsRandLen(300, 600,
                                                        getUpperCaseLetters(),
                                                        rGen, 1000);
    for (auto i : iter::range(randomsOne.size())){
      baseReadObject firstTestObject(seqInfo("firstTest", randomsOne[i]));
      baseReadObject secondTestObject(seqInfo("secondTest", randomsTwo[i]));
      alignerObjTestVec.alignVec(firstTestObject, secondTestObject, false);
      alignerObjTestReg.alignReg(firstTestObject, secondTestObject, false);
      REQUIRE(alignerObjTestReg.alignObjectA_.seqBase_.seq_ == alignerObjTestVec.alignObjectA_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.alignObjectB_.seqBase_.seq_ == alignerObjTestVec.alignObjectB_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.parts_.score_ == alignerObjTestVec.parts_.score_);
    }
    for (auto i : iter::range(randomsOne.size())){
      baseReadObject firstTestObject(seqInfo("firstTest", randomsOne[i]));
      baseReadObject secondTestObject(seqInfo("secondTest", randomsTwo[i]));
      alignerObjTestVec.alignVec(firstTestObject, secondTestObject, false);
      alignerObjTestReg.alignReg(firstTestObject, secondTestObject, false);
      REQUIRE(alignerObjTestReg.alignObjectA_.seqBase_.seq_ == alignerObjTestVec.alignObjectA_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.alignObjectB_.seqBase_.seq_ == alignerObjTestVec.alignObjectB_.seqBase_.seq_);
      REQUIRE(alignerObjTestReg.parts_.score_ == alignerObjTestVec.parts_.score_);
    }
  }
  SECTION ("findReversePrimer"){
  	gapScoringParameters gapParsOne(5.0,1.0);
    std::string str = "CCATCAGGGAAATGTCCAGTATTTGGTAAAGGTATAATTATTGAGAATTCAAATACTACTTTTTTAAAACCGGTAGCTACGGGAAATCAAGATTTAAAAGATGGAGGTTTTGCTTTTCCTCCAACAGAACCTCTTATATCACCAATGACATTAAATGGTATGAGAGATTTTTATAAAAATAATGAATATGTAAAAAATTTAGATGAATTGACTTTATGTTCAAGACATGCAGGAAA";
    std::string target = "TTTATGTTCAAGACATGCA";
    aligner alignerObjTestVec = aligner(len(str), gapParsOne, substituteMatrix(2, -2), true);
    auto pos = alignerObjTestVec.findReversePrimer(baseReadObject(seqInfo("",str)),baseReadObject(seqInfo("",target)));
    REQUIRE(pos.first == 212);
    REQUIRE(pos.second == 230);

  }
}


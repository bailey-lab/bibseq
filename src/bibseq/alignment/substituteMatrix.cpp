//
// bibseq - A library for analyzing sequence data
// Copyright (C) 2012, 2014 Nicholas Hathaway <nicholas.hathaway@umassmed.edu>,
// Jeffrey Bailey <Jeffrey.Bailey@umassmed.edu>
//
// This file is part of bibseq.
//
// bibseq is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// bibseq is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with bibseq.  If not, see <http://www.gnu.org/licenses/>.
//

/*
 * substituteMatrix.cpp
 *
 *  Created on: Apr 11, 2014
 *      Author: nickhathaway
 */

#include "substituteMatrix.hpp"
#include "bibseq/helpers/seqUtil.hpp"
namespace bibseq {

std::vector<char> substituteMatrix::determineLetters()const{
	std::set<char> retSet;
	for(const auto & row : iter::range(mat_.size())){
		for(const auto & col : iter::range(mat_[row].size())){
			if(mat_[row][col] > 0){
				retSet.emplace(static_cast<char>(row));
				retSet.emplace(static_cast<char>(col));
			}
		}
	}
	std::vector<char> ret(retSet.begin(), retSet.end());
	return ret;
}

void substituteMatrix::setWithZeros(){
	for(const auto & row : iter::range(mat_.size())){
		for(const auto & col : iter::range(mat_[row].size())){
			mat_[row][col] = 0;
		}
	}
}
void substituteMatrix::setWithSimple(int32_t match, int32_t mismatch){
	for(const auto & row : iter::range(mat_.size())){
		for(const auto & col : iter::range(mat_[row].size())){
			if(row == col){
				mat_[row][col] = match;
			}else{
				mat_[row][col] = mismatch;
			}
		}
	}
}

void substituteMatrix::setWithMap(const std::map<char, std::map<char, int32_t>> & mapScores){
	setWithZeros();
	for(const auto & row : mapScores){
		for(const auto & col : row.second){
      if (row.first < 0 || row.first > 126 || col.first < 0 ||
      		col.first > 126) {
        std::cout << "Unsupported letter supplied for scoring matrix"
                  << std::endl;
        std::cout << "Only ascii character 0-126 supported " << std::endl;
        std::cout << "Current letters: " << row.first << " and "
                  << col.first << std::endl;
        exit(1);
      }
			mat_[row.first][col.first] = col.second;
		}
	}
}
void substituteMatrix::setWithUnoMap(const std::unordered_map<char, std::unordered_map<char, int32_t>> & mapScores){
	setWithZeros();
	for(const auto & row : mapScores){
		for(const auto & col : row.second){
      if (row.first < 0 || row.first > 126 || col.first < 0 ||
      		col.first > 126) {
        std::cout << "Unsupported letter supplied for scoring matrix"
                  << std::endl;
        std::cout << "Only ascii character 0-126 supported " << std::endl;
        std::cout << "Current letters: " << row.first << " and "
                  << col.first << std::endl;
        exit(1);
      }
      //std::cout << row.first << ":" << col.second << "=" <<
			mat_[row.first][col.first] = col.second;
		}
	}
}
void substituteMatrix::setWtihDNAArray(const int matchMatrix[4][4]){
	setWithZeros();
  // update the score array with the scores supplied by the array assuming the
  // order of A,C,G,T
  // A
  mat_['A']['A'] = matchMatrix[0][0];
  mat_['A']['C'] = matchMatrix[0][1];
  mat_['A']['G'] = matchMatrix[0][2];
  mat_['A']['T'] = matchMatrix[0][3];
  // C
  mat_['C']['A'] = matchMatrix[1][0];
  mat_['C']['C'] = matchMatrix[1][1];
  mat_['C']['G'] = matchMatrix[1][2];
  mat_['C']['T'] = matchMatrix[1][3];
  // G
  mat_['G']['A'] = matchMatrix[2][0];
  mat_['G']['C'] = matchMatrix[2][1];
  mat_['G']['G'] = matchMatrix[2][2];
  mat_['G']['T'] = matchMatrix[2][3];
  // T
  mat_['T']['A'] = matchMatrix[3][0];
  mat_['T']['C'] = matchMatrix[3][1];
  mat_['T']['G'] = matchMatrix[3][2];
  mat_['T']['T'] = matchMatrix[3][3];
}
void substituteMatrix::setWithCaseInsensitive(int32_t match, int32_t mismatch){
  for (auto i : iter::range(mat_.size())) {
    for (auto j : iter::range(mat_[i].size())) {
      if (i == j) {
      	mat_[i][j] = match;
      } else {
      	mat_[i][j] = mismatch;
      }
    }
  }
  std::vector<char> upperCase(26);
  std::iota(upperCase.begin(), upperCase.end(), 'A');
  std::vector<char> lowerCase(26);
  std::iota(lowerCase.begin(), lowerCase.end(), 'a');
  for (const auto& i : iter::range(lowerCase.size())) {
  	mat_[upperCase[i]][lowerCase[i]] = match;
  	mat_[lowerCase[i]][upperCase[i]] = match;
  }
}
void substituteMatrix::setWtihBlosum62(){
	setWithZeros();
	mat_['Y']['Y'] = 7;
	mat_['Y']['W'] = 2;
	mat_['Y']['V'] = -1;
	mat_['Y']['T'] = -2;
	mat_['Y']['S'] = -2;
	mat_['Y']['R'] = -2;
	mat_['Y']['Q'] = -1;
	mat_['Y']['P'] = -3;
	mat_['Y']['N'] = -2;
	mat_['Y']['M'] = -1;
	mat_['Y']['A'] = -2;
	mat_['Y']['L'] = -1;
	mat_['Y']['C'] = -2;
	mat_['Y']['D'] = -3;
	mat_['Y']['E'] = -2;
	mat_['Y']['F'] = 3;
	mat_['Y']['G'] = -3;
	mat_['Y']['H'] = 2;
	mat_['Y']['I'] = -1;
	mat_['Y']['K'] = -2;
	mat_['W']['Y'] = 2;
	mat_['W']['W'] = 11;
	mat_['W']['V'] = -3;
	mat_['W']['T'] = -2;
	mat_['W']['S'] = -3;
	mat_['W']['R'] = -3;
	mat_['W']['Q'] = -2;
	mat_['W']['P'] = -4;
	mat_['W']['N'] = -4;
	mat_['W']['M'] = -1;
	mat_['W']['A'] = -3;
	mat_['W']['L'] = -2;
	mat_['W']['C'] = -2;
	mat_['W']['D'] = -4;
	mat_['W']['E'] = -3;
	mat_['W']['F'] = 1;
	mat_['W']['G'] = -2;
	mat_['W']['H'] = -2;
	mat_['W']['I'] = -3;
	mat_['W']['K'] = -3;
	mat_['V']['Y'] = -1;
	mat_['V']['W'] = -3;
	mat_['V']['V'] = 4;
	mat_['V']['T'] = 0;
	mat_['V']['S'] = -2;
	mat_['V']['R'] = -3;
	mat_['V']['Q'] = -2;
	mat_['V']['P'] = -2;
	mat_['V']['N'] = -3;
	mat_['V']['M'] = 1;
	mat_['V']['A'] = 0;
	mat_['V']['L'] = 1;
	mat_['V']['C'] = -1;
	mat_['V']['D'] = -3;
	mat_['V']['E'] = -2;
	mat_['V']['F'] = -1;
	mat_['V']['G'] = -3;
	mat_['V']['H'] = -3;
	mat_['V']['I'] = 3;
	mat_['V']['K'] = -2;
	mat_['T']['Y'] = -2;
	mat_['T']['W'] = -2;
	mat_['T']['V'] = 0;
	mat_['T']['T'] = 5;
	mat_['T']['S'] = 1;
	mat_['T']['R'] = -1;
	mat_['T']['Q'] = -1;
	mat_['T']['P'] = -1;
	mat_['T']['N'] = 0;
	mat_['T']['M'] = -1;
	mat_['T']['A'] = 0;
	mat_['T']['L'] = -1;
	mat_['T']['C'] = -1;
	mat_['T']['D'] = -1;
	mat_['T']['E'] = -1;
	mat_['T']['F'] = -2;
	mat_['T']['G'] = -2;
	mat_['T']['H'] = -2;
	mat_['T']['I'] = -1;
	mat_['T']['K'] = -1;
	mat_['S']['Y'] = -2;
	mat_['S']['W'] = -3;
	mat_['S']['V'] = -2;
	mat_['S']['T'] = 1;
	mat_['S']['S'] = 4;
	mat_['S']['R'] = -1;
	mat_['S']['Q'] = 0;
	mat_['S']['P'] = -1;
	mat_['S']['N'] = 1;
	mat_['S']['M'] = -1;
	mat_['S']['A'] = 1;
	mat_['S']['L'] = -2;
	mat_['S']['C'] = -1;
	mat_['S']['D'] = 0;
	mat_['S']['E'] = 0;
	mat_['S']['F'] = -2;
	mat_['S']['G'] = 0;
	mat_['S']['H'] = -1;
	mat_['S']['I'] = -2;
	mat_['S']['K'] = 0;
	mat_['R']['Y'] = -2;
	mat_['R']['W'] = -3;
	mat_['R']['V'] = -3;
	mat_['R']['T'] = -1;
	mat_['R']['S'] = -1;
	mat_['R']['R'] = 5;
	mat_['R']['Q'] = 1;
	mat_['R']['P'] = -2;
	mat_['R']['N'] = 0;
	mat_['R']['M'] = -1;
	mat_['R']['A'] = -1;
	mat_['R']['L'] = -2;
	mat_['R']['C'] = -3;
	mat_['R']['D'] = -2;
	mat_['R']['E'] = 0;
	mat_['R']['F'] = -3;
	mat_['R']['G'] = -2;
	mat_['R']['H'] = 0;
	mat_['R']['I'] = -3;
	mat_['R']['K'] = 2;
	mat_['Q']['Y'] = -1;
	mat_['Q']['W'] = -2;
	mat_['Q']['V'] = -2;
	mat_['Q']['T'] = -1;
	mat_['Q']['S'] = 0;
	mat_['Q']['R'] = 1;
	mat_['Q']['Q'] = 5;
	mat_['Q']['P'] = -1;
	mat_['Q']['N'] = 0;
	mat_['Q']['M'] = 0;
	mat_['Q']['A'] = -1;
	mat_['Q']['L'] = -2;
	mat_['Q']['C'] = -3;
	mat_['Q']['D'] = 0;
	mat_['Q']['E'] = 2;
	mat_['Q']['F'] = -3;
	mat_['Q']['G'] = -2;
	mat_['Q']['H'] = 0;
	mat_['Q']['I'] = -3;
	mat_['Q']['K'] = 1;
	mat_['P']['Y'] = -3;
	mat_['P']['W'] = -4;
	mat_['P']['V'] = -2;
	mat_['P']['T'] = -1;
	mat_['P']['S'] = -1;
	mat_['P']['R'] = -2;
	mat_['P']['Q'] = -1;
	mat_['P']['P'] = 7;
	mat_['P']['N'] = -2;
	mat_['P']['M'] = -2;
	mat_['P']['A'] = -1;
	mat_['P']['L'] = -3;
	mat_['P']['C'] = -3;
	mat_['P']['D'] = -1;
	mat_['P']['E'] = -1;
	mat_['P']['F'] = -4;
	mat_['P']['G'] = -2;
	mat_['P']['H'] = -2;
	mat_['P']['I'] = -3;
	mat_['P']['K'] = -1;
	mat_['N']['Y'] = -2;
	mat_['N']['W'] = -4;
	mat_['N']['V'] = -3;
	mat_['N']['T'] = 0;
	mat_['N']['S'] = 1;
	mat_['N']['R'] = 0;
	mat_['N']['Q'] = 0;
	mat_['N']['P'] = -2;
	mat_['N']['N'] = 6;
	mat_['N']['M'] = -2;
	mat_['N']['A'] = -2;
	mat_['N']['L'] = -3;
	mat_['N']['C'] = -3;
	mat_['N']['D'] = 1;
	mat_['N']['E'] = 0;
	mat_['N']['F'] = -3;
	mat_['N']['G'] = 0;
	mat_['N']['H'] = 1;
	mat_['N']['I'] = -3;
	mat_['N']['K'] = 0;
	mat_['M']['Y'] = -1;
	mat_['M']['W'] = -1;
	mat_['M']['V'] = 1;
	mat_['M']['T'] = -1;
	mat_['M']['S'] = -1;
	mat_['M']['R'] = -1;
	mat_['M']['Q'] = 0;
	mat_['M']['P'] = -2;
	mat_['M']['N'] = -2;
	mat_['M']['M'] = 5;
	mat_['M']['A'] = -1;
	mat_['M']['L'] = 2;
	mat_['M']['C'] = -1;
	mat_['M']['D'] = -3;
	mat_['M']['E'] = -2;
	mat_['M']['F'] = 0;
	mat_['M']['G'] = -3;
	mat_['M']['H'] = -2;
	mat_['M']['I'] = 1;
	mat_['M']['K'] = -1;
	mat_['A']['Y'] = -2;
	mat_['A']['W'] = -3;
	mat_['A']['V'] = 0;
	mat_['A']['T'] = 0;
	mat_['A']['S'] = 1;
	mat_['A']['R'] = -1;
	mat_['A']['Q'] = -1;
	mat_['A']['P'] = -1;
	mat_['A']['N'] = -2;
	mat_['A']['M'] = -1;
	mat_['A']['A'] = 4;
	mat_['A']['L'] = -1;
	mat_['A']['C'] = 0;
	mat_['A']['D'] = -2;
	mat_['A']['E'] = -1;
	mat_['A']['F'] = -2;
	mat_['A']['G'] = 0;
	mat_['A']['H'] = -2;
	mat_['A']['I'] = -1;
	mat_['A']['K'] = -1;
	mat_['L']['Y'] = -1;
	mat_['L']['W'] = -2;
	mat_['L']['V'] = 1;
	mat_['L']['T'] = -1;
	mat_['L']['S'] = -2;
	mat_['L']['R'] = -2;
	mat_['L']['Q'] = -2;
	mat_['L']['P'] = -3;
	mat_['L']['N'] = -3;
	mat_['L']['M'] = 2;
	mat_['L']['A'] = -1;
	mat_['L']['L'] = 4;
	mat_['L']['C'] = -1;
	mat_['L']['D'] = -4;
	mat_['L']['E'] = -3;
	mat_['L']['F'] = 0;
	mat_['L']['G'] = -4;
	mat_['L']['H'] = -3;
	mat_['L']['I'] = 2;
	mat_['L']['K'] = -2;
	mat_['C']['Y'] = -2;
	mat_['C']['W'] = -2;
	mat_['C']['V'] = -1;
	mat_['C']['T'] = -1;
	mat_['C']['S'] = -1;
	mat_['C']['R'] = -3;
	mat_['C']['Q'] = -3;
	mat_['C']['P'] = -3;
	mat_['C']['N'] = -3;
	mat_['C']['M'] = -1;
	mat_['C']['A'] = 0;
	mat_['C']['L'] = -1;
	mat_['C']['C'] = 9;
	mat_['C']['D'] = -3;
	mat_['C']['E'] = -4;
	mat_['C']['F'] = -2;
	mat_['C']['G'] = -3;
	mat_['C']['H'] = -3;
	mat_['C']['I'] = -1;
	mat_['C']['K'] = -3;
	mat_['D']['Y'] = -3;
	mat_['D']['W'] = -4;
	mat_['D']['V'] = -3;
	mat_['D']['T'] = -1;
	mat_['D']['S'] = 0;
	mat_['D']['R'] = -2;
	mat_['D']['Q'] = 0;
	mat_['D']['P'] = -1;
	mat_['D']['N'] = 1;
	mat_['D']['M'] = -3;
	mat_['D']['A'] = -2;
	mat_['D']['L'] = -4;
	mat_['D']['C'] = -3;
	mat_['D']['D'] = 6;
	mat_['D']['E'] = 2;
	mat_['D']['F'] = -3;
	mat_['D']['G'] = -1;
	mat_['D']['H'] = -1;
	mat_['D']['I'] = -3;
	mat_['D']['K'] = -1;
	mat_['E']['Y'] = -2;
	mat_['E']['W'] = -3;
	mat_['E']['V'] = -2;
	mat_['E']['T'] = -1;
	mat_['E']['S'] = 0;
	mat_['E']['R'] = 0;
	mat_['E']['Q'] = 2;
	mat_['E']['P'] = -1;
	mat_['E']['N'] = 0;
	mat_['E']['M'] = -2;
	mat_['E']['A'] = -1;
	mat_['E']['L'] = -3;
	mat_['E']['C'] = -4;
	mat_['E']['D'] = 2;
	mat_['E']['E'] = 5;
	mat_['E']['F'] = -3;
	mat_['E']['G'] = -2;
	mat_['E']['H'] = 0;
	mat_['E']['I'] = -3;
	mat_['E']['K'] = 1;
	mat_['F']['Y'] = 3;
	mat_['F']['W'] = 1;
	mat_['F']['V'] = -1;
	mat_['F']['T'] = -2;
	mat_['F']['S'] = -2;
	mat_['F']['R'] = -3;
	mat_['F']['Q'] = -3;
	mat_['F']['P'] = -4;
	mat_['F']['N'] = -3;
	mat_['F']['M'] = 0;
	mat_['F']['A'] = -2;
	mat_['F']['L'] = 0;
	mat_['F']['C'] = -2;
	mat_['F']['D'] = -3;
	mat_['F']['E'] = -3;
	mat_['F']['F'] = 6;
	mat_['F']['G'] = -3;
	mat_['F']['H'] = -1;
	mat_['F']['I'] = 0;
	mat_['F']['K'] = -3;
	mat_['G']['Y'] = -3;
	mat_['G']['W'] = -2;
	mat_['G']['V'] = -3;
	mat_['G']['T'] = -2;
	mat_['G']['S'] = 0;
	mat_['G']['R'] = -2;
	mat_['G']['Q'] = -2;
	mat_['G']['P'] = -2;
	mat_['G']['N'] = 0;
	mat_['G']['M'] = -3;
	mat_['G']['A'] = 0;
	mat_['G']['L'] = -4;
	mat_['G']['C'] = -3;
	mat_['G']['D'] = -1;
	mat_['G']['E'] = -2;
	mat_['G']['F'] = -3;
	mat_['G']['G'] = 6;
	mat_['G']['H'] = -2;
	mat_['G']['I'] = -4;
	mat_['G']['K'] = -2;
	mat_['H']['Y'] = 2;
	mat_['H']['W'] = -2;
	mat_['H']['V'] = -3;
	mat_['H']['T'] = -2;
	mat_['H']['S'] = -1;
	mat_['H']['R'] = 0;
	mat_['H']['Q'] = 0;
	mat_['H']['P'] = -2;
	mat_['H']['N'] = 1;
	mat_['H']['M'] = -2;
	mat_['H']['A'] = -2;
	mat_['H']['L'] = -3;
	mat_['H']['C'] = -3;
	mat_['H']['D'] = -1;
	mat_['H']['E'] = 0;
	mat_['H']['F'] = -1;
	mat_['H']['G'] = -2;
	mat_['H']['H'] = 8;
	mat_['H']['I'] = -3;
	mat_['H']['K'] = -1;
	mat_['I']['Y'] = -1;
	mat_['I']['W'] = -3;
	mat_['I']['V'] = 3;
	mat_['I']['T'] = -1;
	mat_['I']['S'] = -2;
	mat_['I']['R'] = -3;
	mat_['I']['Q'] = -3;
	mat_['I']['P'] = -3;
	mat_['I']['N'] = -3;
	mat_['I']['M'] = 1;
	mat_['I']['A'] = -1;
	mat_['I']['L'] = 2;
	mat_['I']['C'] = -1;
	mat_['I']['D'] = -3;
	mat_['I']['E'] = -3;
	mat_['I']['F'] = 0;
	mat_['I']['G'] = -4;
	mat_['I']['H'] = -3;
	mat_['I']['I'] = 4;
	mat_['I']['K'] = -3;
	mat_['K']['Y'] = -2;
	mat_['K']['W'] = -3;
	mat_['K']['V'] = -2;
	mat_['K']['T'] = -1;
	mat_['K']['S'] = 0;
	mat_['K']['R'] = 2;
	mat_['K']['Q'] = 1;
	mat_['K']['P'] = -1;
	mat_['K']['N'] = 0;
	mat_['K']['M'] = -1;
	mat_['K']['A'] = -1;
	mat_['K']['L'] = -2;
	mat_['K']['C'] = -3;
	mat_['K']['D'] = -1;
	mat_['K']['E'] = 1;
	mat_['K']['F'] = -3;
	mat_['K']['G'] = -2;
	mat_['K']['H'] = -1;
	mat_['K']['I'] = -3;
	mat_['K']['K'] = 5;
}
void substituteMatrix::setWithPam250(){
	setWithZeros();
	mat_['Y']['Y'] = 10;
	mat_['Y']['W'] = 0;
	mat_['Y']['V'] = -2;
	mat_['Y']['T'] = -3;
	mat_['Y']['S'] = -3;
	mat_['Y']['R'] = -4;
	mat_['Y']['Q'] = -4;
	mat_['Y']['P'] = -5;
	mat_['Y']['N'] = -2;
	mat_['Y']['M'] = -2;
	mat_['Y']['A'] = -3;
	mat_['Y']['L'] = -1;
	mat_['Y']['C'] = 0;
	mat_['Y']['D'] = -4;
	mat_['Y']['E'] = -4;
	mat_['Y']['F'] = 7;
	mat_['Y']['G'] = -5;
	mat_['Y']['H'] = 0;
	mat_['Y']['I'] = -1;
	mat_['Y']['K'] = -4;
	mat_['W']['Y'] = 0;
	mat_['W']['W'] = 17;
	mat_['W']['V'] = -6;
	mat_['W']['T'] = -5;
	mat_['W']['S'] = -2;
	mat_['W']['R'] = 2;
	mat_['W']['Q'] = -5;
	mat_['W']['P'] = -6;
	mat_['W']['N'] = -4;
	mat_['W']['M'] = -4;
	mat_['W']['A'] = -6;
	mat_['W']['L'] = -2;
	mat_['W']['C'] = -8;
	mat_['W']['D'] = -7;
	mat_['W']['E'] = -7;
	mat_['W']['F'] = 0;
	mat_['W']['G'] = -7;
	mat_['W']['H'] = -3;
	mat_['W']['I'] = -5;
	mat_['W']['K'] = -3;
	mat_['V']['Y'] = -2;
	mat_['V']['W'] = -6;
	mat_['V']['V'] = 4;
	mat_['V']['T'] = 0;
	mat_['V']['S'] = -1;
	mat_['V']['R'] = -2;
	mat_['V']['Q'] = -2;
	mat_['V']['P'] = -1;
	mat_['V']['N'] = -2;
	mat_['V']['M'] = 2;
	mat_['V']['A'] = 0;
	mat_['V']['L'] = 2;
	mat_['V']['C'] = -2;
	mat_['V']['D'] = -2;
	mat_['V']['E'] = -2;
	mat_['V']['F'] = -1;
	mat_['V']['G'] = -1;
	mat_['V']['H'] = -2;
	mat_['V']['I'] = 4;
	mat_['V']['K'] = -2;
	mat_['T']['Y'] = -3;
	mat_['T']['W'] = -5;
	mat_['T']['V'] = 0;
	mat_['T']['T'] = 3;
	mat_['T']['S'] = 1;
	mat_['T']['R'] = -1;
	mat_['T']['Q'] = -1;
	mat_['T']['P'] = 0;
	mat_['T']['N'] = 0;
	mat_['T']['M'] = -1;
	mat_['T']['A'] = 1;
	mat_['T']['L'] = -2;
	mat_['T']['C'] = -2;
	mat_['T']['D'] = 0;
	mat_['T']['E'] = 0;
	mat_['T']['F'] = -3;
	mat_['T']['G'] = 0;
	mat_['T']['H'] = -1;
	mat_['T']['I'] = 0;
	mat_['T']['K'] = 0;
	mat_['S']['Y'] = -3;
	mat_['S']['W'] = -2;
	mat_['S']['V'] = -1;
	mat_['S']['T'] = 1;
	mat_['S']['S'] = 2;
	mat_['S']['R'] = 0;
	mat_['S']['Q'] = -1;
	mat_['S']['P'] = 1;
	mat_['S']['N'] = 1;
	mat_['S']['M'] = -2;
	mat_['S']['A'] = 1;
	mat_['S']['L'] = -3;
	mat_['S']['C'] = 0;
	mat_['S']['D'] = 0;
	mat_['S']['E'] = 0;
	mat_['S']['F'] = -3;
	mat_['S']['G'] = 1;
	mat_['S']['H'] = -1;
	mat_['S']['I'] = -1;
	mat_['S']['K'] = 0;
	mat_['R']['Y'] = -4;
	mat_['R']['W'] = 2;
	mat_['R']['V'] = -2;
	mat_['R']['T'] = -1;
	mat_['R']['S'] = 0;
	mat_['R']['R'] = 6;
	mat_['R']['Q'] = 1;
	mat_['R']['P'] = 0;
	mat_['R']['N'] = 0;
	mat_['R']['M'] = 0;
	mat_['R']['A'] = -2;
	mat_['R']['L'] = -3;
	mat_['R']['C'] = -4;
	mat_['R']['D'] = -1;
	mat_['R']['E'] = -1;
	mat_['R']['F'] = -4;
	mat_['R']['G'] = -3;
	mat_['R']['H'] = 2;
	mat_['R']['I'] = -2;
	mat_['R']['K'] = 3;
	mat_['Q']['Y'] = -4;
	mat_['Q']['W'] = -5;
	mat_['Q']['V'] = -2;
	mat_['Q']['T'] = -1;
	mat_['Q']['S'] = -1;
	mat_['Q']['R'] = 1;
	mat_['Q']['Q'] = 4;
	mat_['Q']['P'] = 0;
	mat_['Q']['N'] = 1;
	mat_['Q']['M'] = -1;
	mat_['Q']['A'] = 0;
	mat_['Q']['L'] = -2;
	mat_['Q']['C'] = -5;
	mat_['Q']['D'] = 2;
	mat_['Q']['E'] = 2;
	mat_['Q']['F'] = -5;
	mat_['Q']['G'] = -1;
	mat_['Q']['H'] = 3;
	mat_['Q']['I'] = -2;
	mat_['Q']['K'] = 1;
	mat_['P']['Y'] = -5;
	mat_['P']['W'] = -6;
	mat_['P']['V'] = -1;
	mat_['P']['T'] = 0;
	mat_['P']['S'] = 1;
	mat_['P']['R'] = 0;
	mat_['P']['Q'] = 0;
	mat_['P']['P'] = 6;
	mat_['P']['N'] = 0;
	mat_['P']['M'] = -2;
	mat_['P']['A'] = 1;
	mat_['P']['L'] = -3;
	mat_['P']['C'] = -3;
	mat_['P']['D'] = -1;
	mat_['P']['E'] = -1;
	mat_['P']['F'] = -5;
	mat_['P']['G'] = 0;
	mat_['P']['H'] = 0;
	mat_['P']['I'] = -2;
	mat_['P']['K'] = -1;
	mat_['N']['Y'] = -2;
	mat_['N']['W'] = -4;
	mat_['N']['V'] = -2;
	mat_['N']['T'] = 0;
	mat_['N']['S'] = 1;
	mat_['N']['R'] = 0;
	mat_['N']['Q'] = 1;
	mat_['N']['P'] = 0;
	mat_['N']['N'] = 2;
	mat_['N']['M'] = -2;
	mat_['N']['A'] = 0;
	mat_['N']['L'] = -3;
	mat_['N']['C'] = -4;
	mat_['N']['D'] = 2;
	mat_['N']['E'] = 1;
	mat_['N']['F'] = -3;
	mat_['N']['G'] = 0;
	mat_['N']['H'] = 2;
	mat_['N']['I'] = -2;
	mat_['N']['K'] = 1;
	mat_['M']['Y'] = -2;
	mat_['M']['W'] = -4;
	mat_['M']['V'] = 2;
	mat_['M']['T'] = -1;
	mat_['M']['S'] = -2;
	mat_['M']['R'] = 0;
	mat_['M']['Q'] = -1;
	mat_['M']['P'] = -2;
	mat_['M']['N'] = -2;
	mat_['M']['M'] = 6;
	mat_['M']['A'] = -1;
	mat_['M']['L'] = 4;
	mat_['M']['C'] = -5;
	mat_['M']['D'] = -3;
	mat_['M']['E'] = -2;
	mat_['M']['F'] = 0;
	mat_['M']['G'] = -3;
	mat_['M']['H'] = -2;
	mat_['M']['I'] = 2;
	mat_['M']['K'] = 0;
	mat_['A']['Y'] = -3;
	mat_['A']['W'] = -6;
	mat_['A']['V'] = 0;
	mat_['A']['T'] = 1;
	mat_['A']['S'] = 1;
	mat_['A']['R'] = -2;
	mat_['A']['Q'] = 0;
	mat_['A']['P'] = 1;
	mat_['A']['N'] = 0;
	mat_['A']['M'] = -1;
	mat_['A']['A'] = 2;
	mat_['A']['L'] = -2;
	mat_['A']['C'] = -2;
	mat_['A']['D'] = 0;
	mat_['A']['E'] = 0;
	mat_['A']['F'] = -3;
	mat_['A']['G'] = 1;
	mat_['A']['H'] = -1;
	mat_['A']['I'] = -1;
	mat_['A']['K'] = -1;
	mat_['L']['Y'] = -1;
	mat_['L']['W'] = -2;
	mat_['L']['V'] = 2;
	mat_['L']['T'] = -2;
	mat_['L']['S'] = -3;
	mat_['L']['R'] = -3;
	mat_['L']['Q'] = -2;
	mat_['L']['P'] = -3;
	mat_['L']['N'] = -3;
	mat_['L']['M'] = 4;
	mat_['L']['A'] = -2;
	mat_['L']['L'] = 6;
	mat_['L']['C'] = -6;
	mat_['L']['D'] = -4;
	mat_['L']['E'] = -3;
	mat_['L']['F'] = 2;
	mat_['L']['G'] = -4;
	mat_['L']['H'] = -2;
	mat_['L']['I'] = 2;
	mat_['L']['K'] = -3;
	mat_['C']['Y'] = 0;
	mat_['C']['W'] = -8;
	mat_['C']['V'] = -2;
	mat_['C']['T'] = -2;
	mat_['C']['S'] = 0;
	mat_['C']['R'] = -4;
	mat_['C']['Q'] = -5;
	mat_['C']['P'] = -3;
	mat_['C']['N'] = -4;
	mat_['C']['M'] = -5;
	mat_['C']['A'] = -2;
	mat_['C']['L'] = -6;
	mat_['C']['C'] = 12;
	mat_['C']['D'] = -5;
	mat_['C']['E'] = -5;
	mat_['C']['F'] = -4;
	mat_['C']['G'] = -3;
	mat_['C']['H'] = -3;
	mat_['C']['I'] = -2;
	mat_['C']['K'] = -5;
	mat_['D']['Y'] = -4;
	mat_['D']['W'] = -7;
	mat_['D']['V'] = -2;
	mat_['D']['T'] = 0;
	mat_['D']['S'] = 0;
	mat_['D']['R'] = -1;
	mat_['D']['Q'] = 2;
	mat_['D']['P'] = -1;
	mat_['D']['N'] = 2;
	mat_['D']['M'] = -3;
	mat_['D']['A'] = 0;
	mat_['D']['L'] = -4;
	mat_['D']['C'] = -5;
	mat_['D']['D'] = 4;
	mat_['D']['E'] = 3;
	mat_['D']['F'] = -6;
	mat_['D']['G'] = 1;
	mat_['D']['H'] = 1;
	mat_['D']['I'] = -2;
	mat_['D']['K'] = 0;
	mat_['E']['Y'] = -4;
	mat_['E']['W'] = -7;
	mat_['E']['V'] = -2;
	mat_['E']['T'] = 0;
	mat_['E']['S'] = 0;
	mat_['E']['R'] = -1;
	mat_['E']['Q'] = 2;
	mat_['E']['P'] = -1;
	mat_['E']['N'] = 1;
	mat_['E']['M'] = -2;
	mat_['E']['A'] = 0;
	mat_['E']['L'] = -3;
	mat_['E']['C'] = -5;
	mat_['E']['D'] = 3;
	mat_['E']['E'] = 4;
	mat_['E']['F'] = -5;
	mat_['E']['G'] = 0;
	mat_['E']['H'] = 1;
	mat_['E']['I'] = -2;
	mat_['E']['K'] = 0;
	mat_['F']['Y'] = 7;
	mat_['F']['W'] = 0;
	mat_['F']['V'] = -1;
	mat_['F']['T'] = -3;
	mat_['F']['S'] = -3;
	mat_['F']['R'] = -4;
	mat_['F']['Q'] = -5;
	mat_['F']['P'] = -5;
	mat_['F']['N'] = -3;
	mat_['F']['M'] = 0;
	mat_['F']['A'] = -3;
	mat_['F']['L'] = 2;
	mat_['F']['C'] = -4;
	mat_['F']['D'] = -6;
	mat_['F']['E'] = -5;
	mat_['F']['F'] = 9;
	mat_['F']['G'] = -5;
	mat_['F']['H'] = -2;
	mat_['F']['I'] = 1;
	mat_['F']['K'] = -5;
	mat_['G']['Y'] = -5;
	mat_['G']['W'] = -7;
	mat_['G']['V'] = -1;
	mat_['G']['T'] = 0;
	mat_['G']['S'] = 1;
	mat_['G']['R'] = -3;
	mat_['G']['Q'] = -1;
	mat_['G']['P'] = 0;
	mat_['G']['N'] = 0;
	mat_['G']['M'] = -3;
	mat_['G']['A'] = 1;
	mat_['G']['L'] = -4;
	mat_['G']['C'] = -3;
	mat_['G']['D'] = 1;
	mat_['G']['E'] = 0;
	mat_['G']['F'] = -5;
	mat_['G']['G'] = 5;
	mat_['G']['H'] = -2;
	mat_['G']['I'] = -3;
	mat_['G']['K'] = -2;
	mat_['H']['Y'] = 0;
	mat_['H']['W'] = -3;
	mat_['H']['V'] = -2;
	mat_['H']['T'] = -1;
	mat_['H']['S'] = -1;
	mat_['H']['R'] = 2;
	mat_['H']['Q'] = 3;
	mat_['H']['P'] = 0;
	mat_['H']['N'] = 2;
	mat_['H']['M'] = -2;
	mat_['H']['A'] = -1;
	mat_['H']['L'] = -2;
	mat_['H']['C'] = -3;
	mat_['H']['D'] = 1;
	mat_['H']['E'] = 1;
	mat_['H']['F'] = -2;
	mat_['H']['G'] = -2;
	mat_['H']['H'] = 6;
	mat_['H']['I'] = -2;
	mat_['H']['K'] = 0;
	mat_['I']['Y'] = -1;
	mat_['I']['W'] = -5;
	mat_['I']['V'] = 4;
	mat_['I']['T'] = 0;
	mat_['I']['S'] = -1;
	mat_['I']['R'] = -2;
	mat_['I']['Q'] = -2;
	mat_['I']['P'] = -2;
	mat_['I']['N'] = -2;
	mat_['I']['M'] = 2;
	mat_['I']['A'] = -1;
	mat_['I']['L'] = 2;
	mat_['I']['C'] = -2;
	mat_['I']['D'] = -2;
	mat_['I']['E'] = -2;
	mat_['I']['F'] = 1;
	mat_['I']['G'] = -3;
	mat_['I']['H'] = -2;
	mat_['I']['I'] = 5;
	mat_['I']['K'] = -2;
	mat_['K']['Y'] = -4;
	mat_['K']['W'] = -3;
	mat_['K']['V'] = -2;
	mat_['K']['T'] = 0;
	mat_['K']['S'] = 0;
	mat_['K']['R'] = 3;
	mat_['K']['Q'] = 1;
	mat_['K']['P'] = -1;
	mat_['K']['N'] = 1;
	mat_['K']['M'] = 0;
	mat_['K']['A'] = -1;
	mat_['K']['L'] = -3;
	mat_['K']['C'] = -5;
	mat_['K']['D'] = 0;
	mat_['K']['E'] = 0;
	mat_['K']['F'] = -5;
	mat_['K']['G'] = -2;
	mat_['K']['H'] = 0;
	mat_['K']['I'] = -2;
	mat_['K']['K'] = 5;
}
void substituteMatrix::setWithDegenScoringLessN(){
	setWithZeros();
	mat_['N']['A'] = 1;
	mat_['N']['a'] = 1;
	mat_['n']['A'] = 1;
	mat_['n']['a'] = 1;
	mat_['N']['C'] = 1;
	mat_['N']['c'] = 1;
	mat_['n']['C'] = 1;
	mat_['n']['c'] = 1;
	mat_['N']['G'] = 1;
	mat_['N']['g'] = 1;
	mat_['n']['G'] = 1;
	mat_['n']['g'] = 1;
	mat_['N']['T'] = 1;
	mat_['N']['t'] = 1;
	mat_['n']['T'] = 1;
	mat_['n']['t'] = 1;
	mat_['N']['N'] = 1;
	mat_['N']['n'] = 1;
	mat_['n']['N'] = 1;
	mat_['n']['n'] = 1;
	mat_['N']['W'] = 1;
	mat_['N']['w'] = 1;
	mat_['n']['W'] = 1;
	mat_['n']['w'] = 1;
	mat_['N']['S'] = 1;
	mat_['N']['s'] = 1;
	mat_['n']['S'] = 1;
	mat_['n']['s'] = 1;
	mat_['N']['M'] = 1;
	mat_['N']['m'] = 1;
	mat_['n']['M'] = 1;
	mat_['n']['m'] = 1;
	mat_['N']['K'] = 1;
	mat_['N']['k'] = 1;
	mat_['n']['K'] = 1;
	mat_['n']['k'] = 1;
	mat_['N']['R'] = 1;
	mat_['N']['r'] = 1;
	mat_['n']['R'] = 1;
	mat_['n']['r'] = 1;
	mat_['N']['Y'] = 1;
	mat_['N']['y'] = 1;
	mat_['n']['Y'] = 1;
	mat_['n']['y'] = 1;
	mat_['N']['B'] = 1;
	mat_['N']['b'] = 1;
	mat_['n']['B'] = 1;
	mat_['n']['b'] = 1;
	mat_['N']['D'] = 1;
	mat_['N']['d'] = 1;
	mat_['n']['D'] = 1;
	mat_['n']['d'] = 1;
	mat_['N']['H'] = 1;
	mat_['N']['h'] = 1;
	mat_['n']['H'] = 1;
	mat_['n']['h'] = 1;
	mat_['N']['V'] = 1;
	mat_['N']['v'] = 1;
	mat_['n']['V'] = 1;
	mat_['n']['v'] = 1;
	mat_['V']['A'] = 1;
	mat_['V']['a'] = 1;
	mat_['v']['A'] = 1;
	mat_['v']['a'] = 1;
	mat_['V']['C'] = 1;
	mat_['V']['c'] = 1;
	mat_['v']['C'] = 1;
	mat_['v']['c'] = 1;
	mat_['V']['G'] = 1;
	mat_['V']['g'] = 1;
	mat_['v']['G'] = 1;
	mat_['v']['g'] = 1;
	mat_['V']['N'] = 1;
	mat_['V']['n'] = 1;
	mat_['v']['N'] = 1;
	mat_['v']['n'] = 1;
	mat_['V']['T'] = -2;
	mat_['V']['t'] = -2;
	mat_['v']['T'] = -2;
	mat_['v']['t'] = -2;
	mat_['V']['W'] = -2;
	mat_['V']['w'] = -2;
	mat_['v']['W'] = -2;
	mat_['v']['w'] = -2;
	mat_['V']['S'] = -2;
	mat_['V']['s'] = -2;
	mat_['v']['S'] = -2;
	mat_['v']['s'] = -2;
	mat_['V']['M'] = -2;
	mat_['V']['m'] = -2;
	mat_['v']['M'] = -2;
	mat_['v']['m'] = -2;
	mat_['V']['K'] = -2;
	mat_['V']['k'] = -2;
	mat_['v']['K'] = -2;
	mat_['v']['k'] = -2;
	mat_['V']['R'] = -2;
	mat_['V']['r'] = -2;
	mat_['v']['R'] = -2;
	mat_['v']['r'] = -2;
	mat_['V']['Y'] = -2;
	mat_['V']['y'] = -2;
	mat_['v']['Y'] = -2;
	mat_['v']['y'] = -2;
	mat_['V']['B'] = -2;
	mat_['V']['b'] = -2;
	mat_['v']['B'] = -2;
	mat_['v']['b'] = -2;
	mat_['V']['D'] = -2;
	mat_['V']['d'] = -2;
	mat_['v']['D'] = -2;
	mat_['v']['d'] = -2;
	mat_['V']['H'] = -2;
	mat_['V']['h'] = -2;
	mat_['v']['H'] = -2;
	mat_['v']['h'] = -2;
	mat_['V']['V'] = -2;
	mat_['V']['v'] = -2;
	mat_['v']['V'] = -2;
	mat_['v']['v'] = -2;
	mat_['D']['A'] = 1;
	mat_['D']['a'] = 1;
	mat_['d']['A'] = 1;
	mat_['d']['a'] = 1;
	mat_['D']['G'] = 1;
	mat_['D']['g'] = 1;
	mat_['d']['G'] = 1;
	mat_['d']['g'] = 1;
	mat_['D']['T'] = 1;
	mat_['D']['t'] = 1;
	mat_['d']['T'] = 1;
	mat_['d']['t'] = 1;
	mat_['D']['N'] = 1;
	mat_['D']['n'] = 1;
	mat_['d']['N'] = 1;
	mat_['d']['n'] = 1;
	mat_['D']['C'] = -2;
	mat_['D']['c'] = -2;
	mat_['d']['C'] = -2;
	mat_['d']['c'] = -2;
	mat_['D']['W'] = -2;
	mat_['D']['w'] = -2;
	mat_['d']['W'] = -2;
	mat_['d']['w'] = -2;
	mat_['D']['S'] = -2;
	mat_['D']['s'] = -2;
	mat_['d']['S'] = -2;
	mat_['d']['s'] = -2;
	mat_['D']['M'] = -2;
	mat_['D']['m'] = -2;
	mat_['d']['M'] = -2;
	mat_['d']['m'] = -2;
	mat_['D']['K'] = -2;
	mat_['D']['k'] = -2;
	mat_['d']['K'] = -2;
	mat_['d']['k'] = -2;
	mat_['D']['R'] = -2;
	mat_['D']['r'] = -2;
	mat_['d']['R'] = -2;
	mat_['d']['r'] = -2;
	mat_['D']['Y'] = -2;
	mat_['D']['y'] = -2;
	mat_['d']['Y'] = -2;
	mat_['d']['y'] = -2;
	mat_['D']['B'] = -2;
	mat_['D']['b'] = -2;
	mat_['d']['B'] = -2;
	mat_['d']['b'] = -2;
	mat_['D']['D'] = -2;
	mat_['D']['d'] = -2;
	mat_['d']['D'] = -2;
	mat_['d']['d'] = -2;
	mat_['D']['H'] = -2;
	mat_['D']['h'] = -2;
	mat_['d']['H'] = -2;
	mat_['d']['h'] = -2;
	mat_['D']['V'] = -2;
	mat_['D']['v'] = -2;
	mat_['d']['V'] = -2;
	mat_['d']['v'] = -2;
	mat_['H']['A'] = 1;
	mat_['H']['a'] = 1;
	mat_['h']['A'] = 1;
	mat_['h']['a'] = 1;
	mat_['H']['C'] = 1;
	mat_['H']['c'] = 1;
	mat_['h']['C'] = 1;
	mat_['h']['c'] = 1;
	mat_['H']['T'] = 1;
	mat_['H']['t'] = 1;
	mat_['h']['T'] = 1;
	mat_['h']['t'] = 1;
	mat_['H']['N'] = 1;
	mat_['H']['n'] = 1;
	mat_['h']['N'] = 1;
	mat_['h']['n'] = 1;
	mat_['H']['G'] = -2;
	mat_['H']['g'] = -2;
	mat_['h']['G'] = -2;
	mat_['h']['g'] = -2;
	mat_['H']['W'] = -2;
	mat_['H']['w'] = -2;
	mat_['h']['W'] = -2;
	mat_['h']['w'] = -2;
	mat_['H']['S'] = -2;
	mat_['H']['s'] = -2;
	mat_['h']['S'] = -2;
	mat_['h']['s'] = -2;
	mat_['H']['M'] = -2;
	mat_['H']['m'] = -2;
	mat_['h']['M'] = -2;
	mat_['h']['m'] = -2;
	mat_['H']['K'] = -2;
	mat_['H']['k'] = -2;
	mat_['h']['K'] = -2;
	mat_['h']['k'] = -2;
	mat_['H']['R'] = -2;
	mat_['H']['r'] = -2;
	mat_['h']['R'] = -2;
	mat_['h']['r'] = -2;
	mat_['H']['Y'] = -2;
	mat_['H']['y'] = -2;
	mat_['h']['Y'] = -2;
	mat_['h']['y'] = -2;
	mat_['H']['B'] = -2;
	mat_['H']['b'] = -2;
	mat_['h']['B'] = -2;
	mat_['h']['b'] = -2;
	mat_['H']['D'] = -2;
	mat_['H']['d'] = -2;
	mat_['h']['D'] = -2;
	mat_['h']['d'] = -2;
	mat_['H']['H'] = -2;
	mat_['H']['h'] = -2;
	mat_['h']['H'] = -2;
	mat_['h']['h'] = -2;
	mat_['H']['V'] = -2;
	mat_['H']['v'] = -2;
	mat_['h']['V'] = -2;
	mat_['h']['v'] = -2;
	mat_['Y']['C'] = 1;
	mat_['Y']['c'] = 1;
	mat_['y']['C'] = 1;
	mat_['y']['c'] = 1;
	mat_['Y']['T'] = 1;
	mat_['Y']['t'] = 1;
	mat_['y']['T'] = 1;
	mat_['y']['t'] = 1;
	mat_['Y']['B'] = 1;
	mat_['Y']['b'] = 1;
	mat_['y']['B'] = 1;
	mat_['y']['b'] = 1;
	mat_['Y']['H'] = 1;
	mat_['Y']['h'] = 1;
	mat_['y']['H'] = 1;
	mat_['y']['h'] = 1;
	mat_['Y']['N'] = 1;
	mat_['Y']['n'] = 1;
	mat_['y']['N'] = 1;
	mat_['y']['n'] = 1;
	mat_['Y']['A'] = -2;
	mat_['Y']['a'] = -2;
	mat_['y']['A'] = -2;
	mat_['y']['a'] = -2;
	mat_['Y']['G'] = -2;
	mat_['Y']['g'] = -2;
	mat_['y']['G'] = -2;
	mat_['y']['g'] = -2;
	mat_['Y']['W'] = -2;
	mat_['Y']['w'] = -2;
	mat_['y']['W'] = -2;
	mat_['y']['w'] = -2;
	mat_['Y']['S'] = -2;
	mat_['Y']['s'] = -2;
	mat_['y']['S'] = -2;
	mat_['y']['s'] = -2;
	mat_['Y']['M'] = -2;
	mat_['Y']['m'] = -2;
	mat_['y']['M'] = -2;
	mat_['y']['m'] = -2;
	mat_['Y']['K'] = -2;
	mat_['Y']['k'] = -2;
	mat_['y']['K'] = -2;
	mat_['y']['k'] = -2;
	mat_['Y']['R'] = -2;
	mat_['Y']['r'] = -2;
	mat_['y']['R'] = -2;
	mat_['y']['r'] = -2;
	mat_['Y']['Y'] = -2;
	mat_['Y']['y'] = -2;
	mat_['y']['Y'] = -2;
	mat_['y']['y'] = -2;
	mat_['Y']['D'] = -2;
	mat_['Y']['d'] = -2;
	mat_['y']['D'] = -2;
	mat_['y']['d'] = -2;
	mat_['Y']['V'] = -2;
	mat_['Y']['v'] = -2;
	mat_['y']['V'] = -2;
	mat_['y']['v'] = -2;
	mat_['K']['G'] = 1;
	mat_['K']['g'] = 1;
	mat_['k']['G'] = 1;
	mat_['k']['g'] = 1;
	mat_['K']['T'] = 1;
	mat_['K']['t'] = 1;
	mat_['k']['T'] = 1;
	mat_['k']['t'] = 1;
	mat_['K']['B'] = 1;
	mat_['K']['b'] = 1;
	mat_['k']['B'] = 1;
	mat_['k']['b'] = 1;
	mat_['K']['D'] = 1;
	mat_['K']['d'] = 1;
	mat_['k']['D'] = 1;
	mat_['k']['d'] = 1;
	mat_['K']['N'] = 1;
	mat_['K']['n'] = 1;
	mat_['k']['N'] = 1;
	mat_['k']['n'] = 1;
	mat_['K']['A'] = -2;
	mat_['K']['a'] = -2;
	mat_['k']['A'] = -2;
	mat_['k']['a'] = -2;
	mat_['K']['C'] = -2;
	mat_['K']['c'] = -2;
	mat_['k']['C'] = -2;
	mat_['k']['c'] = -2;
	mat_['K']['W'] = -2;
	mat_['K']['w'] = -2;
	mat_['k']['W'] = -2;
	mat_['k']['w'] = -2;
	mat_['K']['S'] = -2;
	mat_['K']['s'] = -2;
	mat_['k']['S'] = -2;
	mat_['k']['s'] = -2;
	mat_['K']['M'] = -2;
	mat_['K']['m'] = -2;
	mat_['k']['M'] = -2;
	mat_['k']['m'] = -2;
	mat_['K']['K'] = -2;
	mat_['K']['k'] = -2;
	mat_['k']['K'] = -2;
	mat_['k']['k'] = -2;
	mat_['K']['R'] = -2;
	mat_['K']['r'] = -2;
	mat_['k']['R'] = -2;
	mat_['k']['r'] = -2;
	mat_['K']['Y'] = -2;
	mat_['K']['y'] = -2;
	mat_['k']['Y'] = -2;
	mat_['k']['y'] = -2;
	mat_['K']['H'] = -2;
	mat_['K']['h'] = -2;
	mat_['k']['H'] = -2;
	mat_['k']['h'] = -2;
	mat_['K']['V'] = -2;
	mat_['K']['v'] = -2;
	mat_['k']['V'] = -2;
	mat_['k']['v'] = -2;
	mat_['M']['A'] = 1;
	mat_['M']['a'] = 1;
	mat_['m']['A'] = 1;
	mat_['m']['a'] = 1;
	mat_['M']['C'] = 1;
	mat_['M']['c'] = 1;
	mat_['m']['C'] = 1;
	mat_['m']['c'] = 1;
	mat_['M']['H'] = 1;
	mat_['M']['h'] = 1;
	mat_['m']['H'] = 1;
	mat_['m']['h'] = 1;
	mat_['M']['V'] = 1;
	mat_['M']['v'] = 1;
	mat_['m']['V'] = 1;
	mat_['m']['v'] = 1;
	mat_['M']['N'] = 1;
	mat_['M']['n'] = 1;
	mat_['m']['N'] = 1;
	mat_['m']['n'] = 1;
	mat_['M']['G'] = -2;
	mat_['M']['g'] = -2;
	mat_['m']['G'] = -2;
	mat_['m']['g'] = -2;
	mat_['M']['T'] = -2;
	mat_['M']['t'] = -2;
	mat_['m']['T'] = -2;
	mat_['m']['t'] = -2;
	mat_['M']['W'] = -2;
	mat_['M']['w'] = -2;
	mat_['m']['W'] = -2;
	mat_['m']['w'] = -2;
	mat_['M']['S'] = -2;
	mat_['M']['s'] = -2;
	mat_['m']['S'] = -2;
	mat_['m']['s'] = -2;
	mat_['M']['M'] = -2;
	mat_['M']['m'] = -2;
	mat_['m']['M'] = -2;
	mat_['m']['m'] = -2;
	mat_['M']['K'] = -2;
	mat_['M']['k'] = -2;
	mat_['m']['K'] = -2;
	mat_['m']['k'] = -2;
	mat_['M']['R'] = -2;
	mat_['M']['r'] = -2;
	mat_['m']['R'] = -2;
	mat_['m']['r'] = -2;
	mat_['M']['Y'] = -2;
	mat_['M']['y'] = -2;
	mat_['m']['Y'] = -2;
	mat_['m']['y'] = -2;
	mat_['M']['B'] = -2;
	mat_['M']['b'] = -2;
	mat_['m']['B'] = -2;
	mat_['m']['b'] = -2;
	mat_['M']['D'] = -2;
	mat_['M']['d'] = -2;
	mat_['m']['D'] = -2;
	mat_['m']['d'] = -2;
	mat_['B']['C'] = 1;
	mat_['B']['c'] = 1;
	mat_['b']['C'] = 1;
	mat_['b']['c'] = 1;
	mat_['B']['G'] = 1;
	mat_['B']['g'] = 1;
	mat_['b']['G'] = 1;
	mat_['b']['g'] = 1;
	mat_['B']['T'] = 1;
	mat_['B']['t'] = 1;
	mat_['b']['T'] = 1;
	mat_['b']['t'] = 1;
	mat_['B']['N'] = 1;
	mat_['B']['n'] = 1;
	mat_['b']['N'] = 1;
	mat_['b']['n'] = 1;
	mat_['B']['A'] = -2;
	mat_['B']['a'] = -2;
	mat_['b']['A'] = -2;
	mat_['b']['a'] = -2;
	mat_['B']['W'] = -2;
	mat_['B']['w'] = -2;
	mat_['b']['W'] = -2;
	mat_['b']['w'] = -2;
	mat_['B']['S'] = -2;
	mat_['B']['s'] = -2;
	mat_['b']['S'] = -2;
	mat_['b']['s'] = -2;
	mat_['B']['M'] = -2;
	mat_['B']['m'] = -2;
	mat_['b']['M'] = -2;
	mat_['b']['m'] = -2;
	mat_['B']['K'] = -2;
	mat_['B']['k'] = -2;
	mat_['b']['K'] = -2;
	mat_['b']['k'] = -2;
	mat_['B']['R'] = -2;
	mat_['B']['r'] = -2;
	mat_['b']['R'] = -2;
	mat_['b']['r'] = -2;
	mat_['B']['Y'] = -2;
	mat_['B']['y'] = -2;
	mat_['b']['Y'] = -2;
	mat_['b']['y'] = -2;
	mat_['B']['B'] = -2;
	mat_['B']['b'] = -2;
	mat_['b']['B'] = -2;
	mat_['b']['b'] = -2;
	mat_['B']['D'] = -2;
	mat_['B']['d'] = -2;
	mat_['b']['D'] = -2;
	mat_['b']['d'] = -2;
	mat_['B']['H'] = -2;
	mat_['B']['h'] = -2;
	mat_['b']['H'] = -2;
	mat_['b']['h'] = -2;
	mat_['B']['V'] = -2;
	mat_['B']['v'] = -2;
	mat_['b']['V'] = -2;
	mat_['b']['v'] = -2;
	mat_['S']['G'] = 1;
	mat_['S']['g'] = 1;
	mat_['s']['G'] = 1;
	mat_['s']['g'] = 1;
	mat_['S']['C'] = 1;
	mat_['S']['c'] = 1;
	mat_['s']['C'] = 1;
	mat_['s']['c'] = 1;
	mat_['S']['B'] = 1;
	mat_['S']['b'] = 1;
	mat_['s']['B'] = 1;
	mat_['s']['b'] = 1;
	mat_['S']['V'] = 1;
	mat_['S']['v'] = 1;
	mat_['s']['V'] = 1;
	mat_['s']['v'] = 1;
	mat_['S']['N'] = 1;
	mat_['S']['n'] = 1;
	mat_['s']['N'] = 1;
	mat_['s']['n'] = 1;
	mat_['S']['A'] = -2;
	mat_['S']['a'] = -2;
	mat_['s']['A'] = -2;
	mat_['s']['a'] = -2;
	mat_['S']['T'] = -2;
	mat_['S']['t'] = -2;
	mat_['s']['T'] = -2;
	mat_['s']['t'] = -2;
	mat_['S']['W'] = -2;
	mat_['S']['w'] = -2;
	mat_['s']['W'] = -2;
	mat_['s']['w'] = -2;
	mat_['S']['S'] = -2;
	mat_['S']['s'] = -2;
	mat_['s']['S'] = -2;
	mat_['s']['s'] = -2;
	mat_['S']['M'] = -2;
	mat_['S']['m'] = -2;
	mat_['s']['M'] = -2;
	mat_['s']['m'] = -2;
	mat_['S']['K'] = -2;
	mat_['S']['k'] = -2;
	mat_['s']['K'] = -2;
	mat_['s']['k'] = -2;
	mat_['S']['R'] = -2;
	mat_['S']['r'] = -2;
	mat_['s']['R'] = -2;
	mat_['s']['r'] = -2;
	mat_['S']['Y'] = -2;
	mat_['S']['y'] = -2;
	mat_['s']['Y'] = -2;
	mat_['s']['y'] = -2;
	mat_['S']['D'] = -2;
	mat_['S']['d'] = -2;
	mat_['s']['D'] = -2;
	mat_['s']['d'] = -2;
	mat_['S']['H'] = -2;
	mat_['S']['h'] = -2;
	mat_['s']['H'] = -2;
	mat_['s']['h'] = -2;
	mat_['W']['A'] = 1;
	mat_['W']['a'] = 1;
	mat_['w']['A'] = 1;
	mat_['w']['a'] = 1;
	mat_['W']['T'] = 1;
	mat_['W']['t'] = 1;
	mat_['w']['T'] = 1;
	mat_['w']['t'] = 1;
	mat_['W']['D'] = 1;
	mat_['W']['d'] = 1;
	mat_['w']['D'] = 1;
	mat_['w']['d'] = 1;
	mat_['W']['H'] = 1;
	mat_['W']['h'] = 1;
	mat_['w']['H'] = 1;
	mat_['w']['h'] = 1;
	mat_['W']['N'] = 1;
	mat_['W']['n'] = 1;
	mat_['w']['N'] = 1;
	mat_['w']['n'] = 1;
	mat_['W']['C'] = -2;
	mat_['W']['c'] = -2;
	mat_['w']['C'] = -2;
	mat_['w']['c'] = -2;
	mat_['W']['G'] = -2;
	mat_['W']['g'] = -2;
	mat_['w']['G'] = -2;
	mat_['w']['g'] = -2;
	mat_['W']['W'] = -2;
	mat_['W']['w'] = -2;
	mat_['w']['W'] = -2;
	mat_['w']['w'] = -2;
	mat_['W']['S'] = -2;
	mat_['W']['s'] = -2;
	mat_['w']['S'] = -2;
	mat_['w']['s'] = -2;
	mat_['W']['M'] = -2;
	mat_['W']['m'] = -2;
	mat_['w']['M'] = -2;
	mat_['w']['m'] = -2;
	mat_['W']['K'] = -2;
	mat_['W']['k'] = -2;
	mat_['w']['K'] = -2;
	mat_['w']['k'] = -2;
	mat_['W']['R'] = -2;
	mat_['W']['r'] = -2;
	mat_['w']['R'] = -2;
	mat_['w']['r'] = -2;
	mat_['W']['Y'] = -2;
	mat_['W']['y'] = -2;
	mat_['w']['Y'] = -2;
	mat_['w']['y'] = -2;
	mat_['W']['B'] = -2;
	mat_['W']['b'] = -2;
	mat_['w']['B'] = -2;
	mat_['w']['b'] = -2;
	mat_['W']['V'] = -2;
	mat_['W']['v'] = -2;
	mat_['w']['V'] = -2;
	mat_['w']['v'] = -2;
	mat_['G']['G'] = 2;
	mat_['G']['g'] = 2;
	mat_['g']['G'] = 2;
	mat_['g']['g'] = 2;
	mat_['G']['S'] = 1;
	mat_['G']['s'] = 1;
	mat_['g']['S'] = 1;
	mat_['g']['s'] = 1;
	mat_['G']['K'] = 1;
	mat_['G']['k'] = 1;
	mat_['g']['K'] = 1;
	mat_['g']['k'] = 1;
	mat_['G']['R'] = 1;
	mat_['G']['r'] = 1;
	mat_['g']['R'] = 1;
	mat_['g']['r'] = 1;
	mat_['G']['B'] = 1;
	mat_['G']['b'] = 1;
	mat_['g']['B'] = 1;
	mat_['g']['b'] = 1;
	mat_['G']['D'] = 1;
	mat_['G']['d'] = 1;
	mat_['g']['D'] = 1;
	mat_['g']['d'] = 1;
	mat_['G']['V'] = 1;
	mat_['G']['v'] = 1;
	mat_['g']['V'] = 1;
	mat_['g']['v'] = 1;
	mat_['G']['N'] = 1;
	mat_['G']['n'] = 1;
	mat_['g']['N'] = 1;
	mat_['g']['n'] = 1;
	mat_['G']['A'] = -2;
	mat_['G']['a'] = -2;
	mat_['g']['A'] = -2;
	mat_['g']['a'] = -2;
	mat_['G']['C'] = -2;
	mat_['G']['c'] = -2;
	mat_['g']['C'] = -2;
	mat_['g']['c'] = -2;
	mat_['G']['T'] = -2;
	mat_['G']['t'] = -2;
	mat_['g']['T'] = -2;
	mat_['g']['t'] = -2;
	mat_['G']['W'] = -2;
	mat_['G']['w'] = -2;
	mat_['g']['W'] = -2;
	mat_['g']['w'] = -2;
	mat_['G']['M'] = -2;
	mat_['G']['m'] = -2;
	mat_['g']['M'] = -2;
	mat_['g']['m'] = -2;
	mat_['G']['Y'] = -2;
	mat_['G']['y'] = -2;
	mat_['g']['Y'] = -2;
	mat_['g']['y'] = -2;
	mat_['G']['H'] = -2;
	mat_['G']['h'] = -2;
	mat_['g']['H'] = -2;
	mat_['g']['h'] = -2;
	mat_['T']['T'] = 2;
	mat_['T']['t'] = 2;
	mat_['t']['T'] = 2;
	mat_['t']['t'] = 2;
	mat_['T']['W'] = 1;
	mat_['T']['w'] = 1;
	mat_['t']['W'] = 1;
	mat_['t']['w'] = 1;
	mat_['T']['K'] = 1;
	mat_['T']['k'] = 1;
	mat_['t']['K'] = 1;
	mat_['t']['k'] = 1;
	mat_['T']['Y'] = 1;
	mat_['T']['y'] = 1;
	mat_['t']['Y'] = 1;
	mat_['t']['y'] = 1;
	mat_['T']['B'] = 1;
	mat_['T']['b'] = 1;
	mat_['t']['B'] = 1;
	mat_['t']['b'] = 1;
	mat_['T']['D'] = 1;
	mat_['T']['d'] = 1;
	mat_['t']['D'] = 1;
	mat_['t']['d'] = 1;
	mat_['T']['H'] = 1;
	mat_['T']['h'] = 1;
	mat_['t']['H'] = 1;
	mat_['t']['h'] = 1;
	mat_['T']['N'] = 1;
	mat_['T']['n'] = 1;
	mat_['t']['N'] = 1;
	mat_['t']['n'] = 1;
	mat_['T']['A'] = -2;
	mat_['T']['a'] = -2;
	mat_['t']['A'] = -2;
	mat_['t']['a'] = -2;
	mat_['T']['C'] = -2;
	mat_['T']['c'] = -2;
	mat_['t']['C'] = -2;
	mat_['t']['c'] = -2;
	mat_['T']['G'] = -2;
	mat_['T']['g'] = -2;
	mat_['t']['G'] = -2;
	mat_['t']['g'] = -2;
	mat_['T']['S'] = -2;
	mat_['T']['s'] = -2;
	mat_['t']['S'] = -2;
	mat_['t']['s'] = -2;
	mat_['T']['M'] = -2;
	mat_['T']['m'] = -2;
	mat_['t']['M'] = -2;
	mat_['t']['m'] = -2;
	mat_['T']['R'] = -2;
	mat_['T']['r'] = -2;
	mat_['t']['R'] = -2;
	mat_['t']['r'] = -2;
	mat_['T']['V'] = -2;
	mat_['T']['v'] = -2;
	mat_['t']['V'] = -2;
	mat_['t']['v'] = -2;
	mat_['C']['C'] = 2;
	mat_['C']['c'] = 2;
	mat_['c']['C'] = 2;
	mat_['c']['c'] = 2;
	mat_['C']['S'] = 1;
	mat_['C']['s'] = 1;
	mat_['c']['S'] = 1;
	mat_['c']['s'] = 1;
	mat_['C']['M'] = 1;
	mat_['C']['m'] = 1;
	mat_['c']['M'] = 1;
	mat_['c']['m'] = 1;
	mat_['C']['Y'] = 1;
	mat_['C']['y'] = 1;
	mat_['c']['Y'] = 1;
	mat_['c']['y'] = 1;
	mat_['C']['B'] = 1;
	mat_['C']['b'] = 1;
	mat_['c']['B'] = 1;
	mat_['c']['b'] = 1;
	mat_['C']['H'] = 1;
	mat_['C']['h'] = 1;
	mat_['c']['H'] = 1;
	mat_['c']['h'] = 1;
	mat_['C']['V'] = 1;
	mat_['C']['v'] = 1;
	mat_['c']['V'] = 1;
	mat_['c']['v'] = 1;
	mat_['C']['N'] = 1;
	mat_['C']['n'] = 1;
	mat_['c']['N'] = 1;
	mat_['c']['n'] = 1;
	mat_['C']['A'] = -2;
	mat_['C']['a'] = -2;
	mat_['c']['A'] = -2;
	mat_['c']['a'] = -2;
	mat_['C']['G'] = -2;
	mat_['C']['g'] = -2;
	mat_['c']['G'] = -2;
	mat_['c']['g'] = -2;
	mat_['C']['T'] = -2;
	mat_['C']['t'] = -2;
	mat_['c']['T'] = -2;
	mat_['c']['t'] = -2;
	mat_['C']['W'] = -2;
	mat_['C']['w'] = -2;
	mat_['c']['W'] = -2;
	mat_['c']['w'] = -2;
	mat_['C']['K'] = -2;
	mat_['C']['k'] = -2;
	mat_['c']['K'] = -2;
	mat_['c']['k'] = -2;
	mat_['C']['R'] = -2;
	mat_['C']['r'] = -2;
	mat_['c']['R'] = -2;
	mat_['c']['r'] = -2;
	mat_['C']['D'] = -2;
	mat_['C']['d'] = -2;
	mat_['c']['D'] = -2;
	mat_['c']['d'] = -2;
	mat_['R']['A'] = 1;
	mat_['R']['a'] = 1;
	mat_['r']['A'] = 1;
	mat_['r']['a'] = 1;
	mat_['R']['G'] = 1;
	mat_['R']['g'] = 1;
	mat_['r']['G'] = 1;
	mat_['r']['g'] = 1;
	mat_['R']['D'] = 1;
	mat_['R']['d'] = 1;
	mat_['r']['D'] = 1;
	mat_['r']['d'] = 1;
	mat_['R']['V'] = 1;
	mat_['R']['v'] = 1;
	mat_['r']['V'] = 1;
	mat_['r']['v'] = 1;
	mat_['R']['N'] = 1;
	mat_['R']['n'] = 1;
	mat_['r']['N'] = 1;
	mat_['r']['n'] = 1;
	mat_['R']['C'] = -2;
	mat_['R']['c'] = -2;
	mat_['r']['C'] = -2;
	mat_['r']['c'] = -2;
	mat_['R']['T'] = -2;
	mat_['R']['t'] = -2;
	mat_['r']['T'] = -2;
	mat_['r']['t'] = -2;
	mat_['R']['W'] = -2;
	mat_['R']['w'] = -2;
	mat_['r']['W'] = -2;
	mat_['r']['w'] = -2;
	mat_['R']['S'] = -2;
	mat_['R']['s'] = -2;
	mat_['r']['S'] = -2;
	mat_['r']['s'] = -2;
	mat_['R']['M'] = -2;
	mat_['R']['m'] = -2;
	mat_['r']['M'] = -2;
	mat_['r']['m'] = -2;
	mat_['R']['K'] = -2;
	mat_['R']['k'] = -2;
	mat_['r']['K'] = -2;
	mat_['r']['k'] = -2;
	mat_['R']['R'] = -2;
	mat_['R']['r'] = -2;
	mat_['r']['R'] = -2;
	mat_['r']['r'] = -2;
	mat_['R']['Y'] = -2;
	mat_['R']['y'] = -2;
	mat_['r']['Y'] = -2;
	mat_['r']['y'] = -2;
	mat_['R']['B'] = -2;
	mat_['R']['b'] = -2;
	mat_['r']['B'] = -2;
	mat_['r']['b'] = -2;
	mat_['R']['H'] = -2;
	mat_['R']['h'] = -2;
	mat_['r']['H'] = -2;
	mat_['r']['h'] = -2;
	mat_['A']['A'] = 2;
	mat_['A']['a'] = 2;
	mat_['a']['A'] = 2;
	mat_['a']['a'] = 2;
	mat_['A']['W'] = 1;
	mat_['A']['w'] = 1;
	mat_['a']['W'] = 1;
	mat_['a']['w'] = 1;
	mat_['A']['M'] = 1;
	mat_['A']['m'] = 1;
	mat_['a']['M'] = 1;
	mat_['a']['m'] = 1;
	mat_['A']['R'] = 1;
	mat_['A']['r'] = 1;
	mat_['a']['R'] = 1;
	mat_['a']['r'] = 1;
	mat_['A']['D'] = 1;
	mat_['A']['d'] = 1;
	mat_['a']['D'] = 1;
	mat_['a']['d'] = 1;
	mat_['A']['H'] = 1;
	mat_['A']['h'] = 1;
	mat_['a']['H'] = 1;
	mat_['a']['h'] = 1;
	mat_['A']['V'] = 1;
	mat_['A']['v'] = 1;
	mat_['a']['V'] = 1;
	mat_['a']['v'] = 1;
	mat_['A']['N'] = 1;
	mat_['A']['n'] = 1;
	mat_['a']['N'] = 1;
	mat_['a']['n'] = 1;
	mat_['A']['C'] = -2;
	mat_['A']['c'] = -2;
	mat_['a']['C'] = -2;
	mat_['a']['c'] = -2;
	mat_['A']['G'] = -2;
	mat_['A']['g'] = -2;
	mat_['a']['G'] = -2;
	mat_['a']['g'] = -2;
	mat_['A']['T'] = -2;
	mat_['A']['t'] = -2;
	mat_['a']['T'] = -2;
	mat_['a']['t'] = -2;
	mat_['A']['S'] = -2;
	mat_['A']['s'] = -2;
	mat_['a']['S'] = -2;
	mat_['a']['s'] = -2;
	mat_['A']['K'] = -2;
	mat_['A']['k'] = -2;
	mat_['a']['K'] = -2;
	mat_['a']['k'] = -2;
	mat_['A']['Y'] = -2;
	mat_['A']['y'] = -2;
	mat_['a']['Y'] = -2;
	mat_['a']['y'] = -2;
	mat_['A']['B'] = -2;
	mat_['A']['b'] = -2;
	mat_['a']['B'] = -2;
	mat_['a']['b'] = -2;
}
void substituteMatrix::setWithDegenScoringCaseInsen(int32_t matchScore, int32_t mismatchScore){
	setWithZeros();
	mat_['N']['A'] = matchScore;
	mat_['N']['a'] = matchScore;
	mat_['n']['A'] = matchScore;
	mat_['n']['a'] = matchScore;
	mat_['N']['C'] = matchScore;
	mat_['N']['c'] = matchScore;
	mat_['n']['C'] = matchScore;
	mat_['n']['c'] = matchScore;
	mat_['N']['G'] = matchScore;
	mat_['N']['g'] = matchScore;
	mat_['n']['G'] = matchScore;
	mat_['n']['g'] = matchScore;
	mat_['N']['T'] = matchScore;
	mat_['N']['t'] = matchScore;
	mat_['n']['T'] = matchScore;
	mat_['n']['t'] = matchScore;
	mat_['N']['N'] = matchScore;
	mat_['N']['n'] = matchScore;
	mat_['n']['N'] = matchScore;
	mat_['n']['n'] = matchScore;
	mat_['N']['W'] = matchScore;
	mat_['N']['w'] = matchScore;
	mat_['n']['W'] = matchScore;
	mat_['n']['w'] = matchScore;
	mat_['N']['S'] = matchScore;
	mat_['N']['s'] = matchScore;
	mat_['n']['S'] = matchScore;
	mat_['n']['s'] = matchScore;
	mat_['N']['M'] = matchScore;
	mat_['N']['m'] = matchScore;
	mat_['n']['M'] = matchScore;
	mat_['n']['m'] = matchScore;
	mat_['N']['K'] = matchScore;
	mat_['N']['k'] = matchScore;
	mat_['n']['K'] = matchScore;
	mat_['n']['k'] = matchScore;
	mat_['N']['R'] = matchScore;
	mat_['N']['r'] = matchScore;
	mat_['n']['R'] = matchScore;
	mat_['n']['r'] = matchScore;
	mat_['N']['Y'] = matchScore;
	mat_['N']['y'] = matchScore;
	mat_['n']['Y'] = matchScore;
	mat_['n']['y'] = matchScore;
	mat_['N']['B'] = matchScore;
	mat_['N']['b'] = matchScore;
	mat_['n']['B'] = matchScore;
	mat_['n']['b'] = matchScore;
	mat_['N']['D'] = matchScore;
	mat_['N']['d'] = matchScore;
	mat_['n']['D'] = matchScore;
	mat_['n']['d'] = matchScore;
	mat_['N']['H'] = matchScore;
	mat_['N']['h'] = matchScore;
	mat_['n']['H'] = matchScore;
	mat_['n']['h'] = matchScore;
	mat_['N']['V'] = matchScore;
	mat_['N']['v'] = matchScore;
	mat_['n']['V'] = matchScore;
	mat_['n']['v'] = matchScore;
	mat_['V']['A'] = matchScore;
	mat_['V']['a'] = matchScore;
	mat_['v']['A'] = matchScore;
	mat_['v']['a'] = matchScore;
	mat_['V']['C'] = matchScore;
	mat_['V']['c'] = matchScore;
	mat_['v']['C'] = matchScore;
	mat_['v']['c'] = matchScore;
	mat_['V']['G'] = matchScore;
	mat_['V']['g'] = matchScore;
	mat_['v']['G'] = matchScore;
	mat_['v']['g'] = matchScore;
	mat_['V']['N'] = matchScore;
	mat_['V']['n'] = matchScore;
	mat_['v']['N'] = matchScore;
	mat_['v']['n'] = matchScore;
	mat_['V']['T'] = mismatchScore;
	mat_['V']['t'] = mismatchScore;
	mat_['v']['T'] = mismatchScore;
	mat_['v']['t'] = mismatchScore;
	mat_['V']['W'] = mismatchScore;
	mat_['V']['w'] = mismatchScore;
	mat_['v']['W'] = mismatchScore;
	mat_['v']['w'] = mismatchScore;
	mat_['V']['S'] = mismatchScore;
	mat_['V']['s'] = mismatchScore;
	mat_['v']['S'] = mismatchScore;
	mat_['v']['s'] = mismatchScore;
	mat_['V']['M'] = mismatchScore;
	mat_['V']['m'] = mismatchScore;
	mat_['v']['M'] = mismatchScore;
	mat_['v']['m'] = mismatchScore;
	mat_['V']['K'] = mismatchScore;
	mat_['V']['k'] = mismatchScore;
	mat_['v']['K'] = mismatchScore;
	mat_['v']['k'] = mismatchScore;
	mat_['V']['R'] = mismatchScore;
	mat_['V']['r'] = mismatchScore;
	mat_['v']['R'] = mismatchScore;
	mat_['v']['r'] = mismatchScore;
	mat_['V']['Y'] = mismatchScore;
	mat_['V']['y'] = mismatchScore;
	mat_['v']['Y'] = mismatchScore;
	mat_['v']['y'] = mismatchScore;
	mat_['V']['B'] = mismatchScore;
	mat_['V']['b'] = mismatchScore;
	mat_['v']['B'] = mismatchScore;
	mat_['v']['b'] = mismatchScore;
	mat_['V']['D'] = mismatchScore;
	mat_['V']['d'] = mismatchScore;
	mat_['v']['D'] = mismatchScore;
	mat_['v']['d'] = mismatchScore;
	mat_['V']['H'] = mismatchScore;
	mat_['V']['h'] = mismatchScore;
	mat_['v']['H'] = mismatchScore;
	mat_['v']['h'] = mismatchScore;
	mat_['V']['V'] = mismatchScore;
	mat_['V']['v'] = mismatchScore;
	mat_['v']['V'] = mismatchScore;
	mat_['v']['v'] = mismatchScore;
	mat_['D']['A'] = matchScore;
	mat_['D']['a'] = matchScore;
	mat_['d']['A'] = matchScore;
	mat_['d']['a'] = matchScore;
	mat_['D']['G'] = matchScore;
	mat_['D']['g'] = matchScore;
	mat_['d']['G'] = matchScore;
	mat_['d']['g'] = matchScore;
	mat_['D']['T'] = matchScore;
	mat_['D']['t'] = matchScore;
	mat_['d']['T'] = matchScore;
	mat_['d']['t'] = matchScore;
	mat_['D']['N'] = matchScore;
	mat_['D']['n'] = matchScore;
	mat_['d']['N'] = matchScore;
	mat_['d']['n'] = matchScore;
	mat_['D']['C'] = mismatchScore;
	mat_['D']['c'] = mismatchScore;
	mat_['d']['C'] = mismatchScore;
	mat_['d']['c'] = mismatchScore;
	mat_['D']['W'] = mismatchScore;
	mat_['D']['w'] = mismatchScore;
	mat_['d']['W'] = mismatchScore;
	mat_['d']['w'] = mismatchScore;
	mat_['D']['S'] = mismatchScore;
	mat_['D']['s'] = mismatchScore;
	mat_['d']['S'] = mismatchScore;
	mat_['d']['s'] = mismatchScore;
	mat_['D']['M'] = mismatchScore;
	mat_['D']['m'] = mismatchScore;
	mat_['d']['M'] = mismatchScore;
	mat_['d']['m'] = mismatchScore;
	mat_['D']['K'] = mismatchScore;
	mat_['D']['k'] = mismatchScore;
	mat_['d']['K'] = mismatchScore;
	mat_['d']['k'] = mismatchScore;
	mat_['D']['R'] = mismatchScore;
	mat_['D']['r'] = mismatchScore;
	mat_['d']['R'] = mismatchScore;
	mat_['d']['r'] = mismatchScore;
	mat_['D']['Y'] = mismatchScore;
	mat_['D']['y'] = mismatchScore;
	mat_['d']['Y'] = mismatchScore;
	mat_['d']['y'] = mismatchScore;
	mat_['D']['B'] = mismatchScore;
	mat_['D']['b'] = mismatchScore;
	mat_['d']['B'] = mismatchScore;
	mat_['d']['b'] = mismatchScore;
	mat_['D']['D'] = mismatchScore;
	mat_['D']['d'] = mismatchScore;
	mat_['d']['D'] = mismatchScore;
	mat_['d']['d'] = mismatchScore;
	mat_['D']['H'] = mismatchScore;
	mat_['D']['h'] = mismatchScore;
	mat_['d']['H'] = mismatchScore;
	mat_['d']['h'] = mismatchScore;
	mat_['D']['V'] = mismatchScore;
	mat_['D']['v'] = mismatchScore;
	mat_['d']['V'] = mismatchScore;
	mat_['d']['v'] = mismatchScore;
	mat_['H']['A'] = matchScore;
	mat_['H']['a'] = matchScore;
	mat_['h']['A'] = matchScore;
	mat_['h']['a'] = matchScore;
	mat_['H']['C'] = matchScore;
	mat_['H']['c'] = matchScore;
	mat_['h']['C'] = matchScore;
	mat_['h']['c'] = matchScore;
	mat_['H']['T'] = matchScore;
	mat_['H']['t'] = matchScore;
	mat_['h']['T'] = matchScore;
	mat_['h']['t'] = matchScore;
	mat_['H']['N'] = matchScore;
	mat_['H']['n'] = matchScore;
	mat_['h']['N'] = matchScore;
	mat_['h']['n'] = matchScore;
	mat_['H']['G'] = mismatchScore;
	mat_['H']['g'] = mismatchScore;
	mat_['h']['G'] = mismatchScore;
	mat_['h']['g'] = mismatchScore;
	mat_['H']['W'] = mismatchScore;
	mat_['H']['w'] = mismatchScore;
	mat_['h']['W'] = mismatchScore;
	mat_['h']['w'] = mismatchScore;
	mat_['H']['S'] = mismatchScore;
	mat_['H']['s'] = mismatchScore;
	mat_['h']['S'] = mismatchScore;
	mat_['h']['s'] = mismatchScore;
	mat_['H']['M'] = mismatchScore;
	mat_['H']['m'] = mismatchScore;
	mat_['h']['M'] = mismatchScore;
	mat_['h']['m'] = mismatchScore;
	mat_['H']['K'] = mismatchScore;
	mat_['H']['k'] = mismatchScore;
	mat_['h']['K'] = mismatchScore;
	mat_['h']['k'] = mismatchScore;
	mat_['H']['R'] = mismatchScore;
	mat_['H']['r'] = mismatchScore;
	mat_['h']['R'] = mismatchScore;
	mat_['h']['r'] = mismatchScore;
	mat_['H']['Y'] = mismatchScore;
	mat_['H']['y'] = mismatchScore;
	mat_['h']['Y'] = mismatchScore;
	mat_['h']['y'] = mismatchScore;
	mat_['H']['B'] = mismatchScore;
	mat_['H']['b'] = mismatchScore;
	mat_['h']['B'] = mismatchScore;
	mat_['h']['b'] = mismatchScore;
	mat_['H']['D'] = mismatchScore;
	mat_['H']['d'] = mismatchScore;
	mat_['h']['D'] = mismatchScore;
	mat_['h']['d'] = mismatchScore;
	mat_['H']['H'] = mismatchScore;
	mat_['H']['h'] = mismatchScore;
	mat_['h']['H'] = mismatchScore;
	mat_['h']['h'] = mismatchScore;
	mat_['H']['V'] = mismatchScore;
	mat_['H']['v'] = mismatchScore;
	mat_['h']['V'] = mismatchScore;
	mat_['h']['v'] = mismatchScore;
	mat_['Y']['C'] = matchScore;
	mat_['Y']['c'] = matchScore;
	mat_['y']['C'] = matchScore;
	mat_['y']['c'] = matchScore;
	mat_['Y']['T'] = matchScore;
	mat_['Y']['t'] = matchScore;
	mat_['y']['T'] = matchScore;
	mat_['y']['t'] = matchScore;
	mat_['Y']['B'] = matchScore;
	mat_['Y']['b'] = matchScore;
	mat_['y']['B'] = matchScore;
	mat_['y']['b'] = matchScore;
	mat_['Y']['H'] = matchScore;
	mat_['Y']['h'] = matchScore;
	mat_['y']['H'] = matchScore;
	mat_['y']['h'] = matchScore;
	mat_['Y']['N'] = matchScore;
	mat_['Y']['n'] = matchScore;
	mat_['y']['N'] = matchScore;
	mat_['y']['n'] = matchScore;
	mat_['Y']['A'] = mismatchScore;
	mat_['Y']['a'] = mismatchScore;
	mat_['y']['A'] = mismatchScore;
	mat_['y']['a'] = mismatchScore;
	mat_['Y']['G'] = mismatchScore;
	mat_['Y']['g'] = mismatchScore;
	mat_['y']['G'] = mismatchScore;
	mat_['y']['g'] = mismatchScore;
	mat_['Y']['W'] = mismatchScore;
	mat_['Y']['w'] = mismatchScore;
	mat_['y']['W'] = mismatchScore;
	mat_['y']['w'] = mismatchScore;
	mat_['Y']['S'] = mismatchScore;
	mat_['Y']['s'] = mismatchScore;
	mat_['y']['S'] = mismatchScore;
	mat_['y']['s'] = mismatchScore;
	mat_['Y']['M'] = mismatchScore;
	mat_['Y']['m'] = mismatchScore;
	mat_['y']['M'] = mismatchScore;
	mat_['y']['m'] = mismatchScore;
	mat_['Y']['K'] = mismatchScore;
	mat_['Y']['k'] = mismatchScore;
	mat_['y']['K'] = mismatchScore;
	mat_['y']['k'] = mismatchScore;
	mat_['Y']['R'] = mismatchScore;
	mat_['Y']['r'] = mismatchScore;
	mat_['y']['R'] = mismatchScore;
	mat_['y']['r'] = mismatchScore;
	mat_['Y']['Y'] = mismatchScore;
	mat_['Y']['y'] = mismatchScore;
	mat_['y']['Y'] = mismatchScore;
	mat_['y']['y'] = mismatchScore;
	mat_['Y']['D'] = mismatchScore;
	mat_['Y']['d'] = mismatchScore;
	mat_['y']['D'] = mismatchScore;
	mat_['y']['d'] = mismatchScore;
	mat_['Y']['V'] = mismatchScore;
	mat_['Y']['v'] = mismatchScore;
	mat_['y']['V'] = mismatchScore;
	mat_['y']['v'] = mismatchScore;
	mat_['K']['G'] = matchScore;
	mat_['K']['g'] = matchScore;
	mat_['k']['G'] = matchScore;
	mat_['k']['g'] = matchScore;
	mat_['K']['T'] = matchScore;
	mat_['K']['t'] = matchScore;
	mat_['k']['T'] = matchScore;
	mat_['k']['t'] = matchScore;
	mat_['K']['B'] = matchScore;
	mat_['K']['b'] = matchScore;
	mat_['k']['B'] = matchScore;
	mat_['k']['b'] = matchScore;
	mat_['K']['D'] = matchScore;
	mat_['K']['d'] = matchScore;
	mat_['k']['D'] = matchScore;
	mat_['k']['d'] = matchScore;
	mat_['K']['N'] = matchScore;
	mat_['K']['n'] = matchScore;
	mat_['k']['N'] = matchScore;
	mat_['k']['n'] = matchScore;
	mat_['K']['A'] = mismatchScore;
	mat_['K']['a'] = mismatchScore;
	mat_['k']['A'] = mismatchScore;
	mat_['k']['a'] = mismatchScore;
	mat_['K']['C'] = mismatchScore;
	mat_['K']['c'] = mismatchScore;
	mat_['k']['C'] = mismatchScore;
	mat_['k']['c'] = mismatchScore;
	mat_['K']['W'] = mismatchScore;
	mat_['K']['w'] = mismatchScore;
	mat_['k']['W'] = mismatchScore;
	mat_['k']['w'] = mismatchScore;
	mat_['K']['S'] = mismatchScore;
	mat_['K']['s'] = mismatchScore;
	mat_['k']['S'] = mismatchScore;
	mat_['k']['s'] = mismatchScore;
	mat_['K']['M'] = mismatchScore;
	mat_['K']['m'] = mismatchScore;
	mat_['k']['M'] = mismatchScore;
	mat_['k']['m'] = mismatchScore;
	mat_['K']['K'] = mismatchScore;
	mat_['K']['k'] = mismatchScore;
	mat_['k']['K'] = mismatchScore;
	mat_['k']['k'] = mismatchScore;
	mat_['K']['R'] = mismatchScore;
	mat_['K']['r'] = mismatchScore;
	mat_['k']['R'] = mismatchScore;
	mat_['k']['r'] = mismatchScore;
	mat_['K']['Y'] = mismatchScore;
	mat_['K']['y'] = mismatchScore;
	mat_['k']['Y'] = mismatchScore;
	mat_['k']['y'] = mismatchScore;
	mat_['K']['H'] = mismatchScore;
	mat_['K']['h'] = mismatchScore;
	mat_['k']['H'] = mismatchScore;
	mat_['k']['h'] = mismatchScore;
	mat_['K']['V'] = mismatchScore;
	mat_['K']['v'] = mismatchScore;
	mat_['k']['V'] = mismatchScore;
	mat_['k']['v'] = mismatchScore;
	mat_['M']['A'] = matchScore;
	mat_['M']['a'] = matchScore;
	mat_['m']['A'] = matchScore;
	mat_['m']['a'] = matchScore;
	mat_['M']['C'] = matchScore;
	mat_['M']['c'] = matchScore;
	mat_['m']['C'] = matchScore;
	mat_['m']['c'] = matchScore;
	mat_['M']['H'] = matchScore;
	mat_['M']['h'] = matchScore;
	mat_['m']['H'] = matchScore;
	mat_['m']['h'] = matchScore;
	mat_['M']['V'] = matchScore;
	mat_['M']['v'] = matchScore;
	mat_['m']['V'] = matchScore;
	mat_['m']['v'] = matchScore;
	mat_['M']['N'] = matchScore;
	mat_['M']['n'] = matchScore;
	mat_['m']['N'] = matchScore;
	mat_['m']['n'] = matchScore;
	mat_['M']['G'] = mismatchScore;
	mat_['M']['g'] = mismatchScore;
	mat_['m']['G'] = mismatchScore;
	mat_['m']['g'] = mismatchScore;
	mat_['M']['T'] = mismatchScore;
	mat_['M']['t'] = mismatchScore;
	mat_['m']['T'] = mismatchScore;
	mat_['m']['t'] = mismatchScore;
	mat_['M']['W'] = mismatchScore;
	mat_['M']['w'] = mismatchScore;
	mat_['m']['W'] = mismatchScore;
	mat_['m']['w'] = mismatchScore;
	mat_['M']['S'] = mismatchScore;
	mat_['M']['s'] = mismatchScore;
	mat_['m']['S'] = mismatchScore;
	mat_['m']['s'] = mismatchScore;
	mat_['M']['M'] = mismatchScore;
	mat_['M']['m'] = mismatchScore;
	mat_['m']['M'] = mismatchScore;
	mat_['m']['m'] = mismatchScore;
	mat_['M']['K'] = mismatchScore;
	mat_['M']['k'] = mismatchScore;
	mat_['m']['K'] = mismatchScore;
	mat_['m']['k'] = mismatchScore;
	mat_['M']['R'] = mismatchScore;
	mat_['M']['r'] = mismatchScore;
	mat_['m']['R'] = mismatchScore;
	mat_['m']['r'] = mismatchScore;
	mat_['M']['Y'] = mismatchScore;
	mat_['M']['y'] = mismatchScore;
	mat_['m']['Y'] = mismatchScore;
	mat_['m']['y'] = mismatchScore;
	mat_['M']['B'] = mismatchScore;
	mat_['M']['b'] = mismatchScore;
	mat_['m']['B'] = mismatchScore;
	mat_['m']['b'] = mismatchScore;
	mat_['M']['D'] = mismatchScore;
	mat_['M']['d'] = mismatchScore;
	mat_['m']['D'] = mismatchScore;
	mat_['m']['d'] = mismatchScore;
	mat_['B']['C'] = matchScore;
	mat_['B']['c'] = matchScore;
	mat_['b']['C'] = matchScore;
	mat_['b']['c'] = matchScore;
	mat_['B']['G'] = matchScore;
	mat_['B']['g'] = matchScore;
	mat_['b']['G'] = matchScore;
	mat_['b']['g'] = matchScore;
	mat_['B']['T'] = matchScore;
	mat_['B']['t'] = matchScore;
	mat_['b']['T'] = matchScore;
	mat_['b']['t'] = matchScore;
	mat_['B']['N'] = matchScore;
	mat_['B']['n'] = matchScore;
	mat_['b']['N'] = matchScore;
	mat_['b']['n'] = matchScore;
	mat_['B']['A'] = mismatchScore;
	mat_['B']['a'] = mismatchScore;
	mat_['b']['A'] = mismatchScore;
	mat_['b']['a'] = mismatchScore;
	mat_['B']['W'] = mismatchScore;
	mat_['B']['w'] = mismatchScore;
	mat_['b']['W'] = mismatchScore;
	mat_['b']['w'] = mismatchScore;
	mat_['B']['S'] = mismatchScore;
	mat_['B']['s'] = mismatchScore;
	mat_['b']['S'] = mismatchScore;
	mat_['b']['s'] = mismatchScore;
	mat_['B']['M'] = mismatchScore;
	mat_['B']['m'] = mismatchScore;
	mat_['b']['M'] = mismatchScore;
	mat_['b']['m'] = mismatchScore;
	mat_['B']['K'] = mismatchScore;
	mat_['B']['k'] = mismatchScore;
	mat_['b']['K'] = mismatchScore;
	mat_['b']['k'] = mismatchScore;
	mat_['B']['R'] = mismatchScore;
	mat_['B']['r'] = mismatchScore;
	mat_['b']['R'] = mismatchScore;
	mat_['b']['r'] = mismatchScore;
	mat_['B']['Y'] = mismatchScore;
	mat_['B']['y'] = mismatchScore;
	mat_['b']['Y'] = mismatchScore;
	mat_['b']['y'] = mismatchScore;
	mat_['B']['B'] = mismatchScore;
	mat_['B']['b'] = mismatchScore;
	mat_['b']['B'] = mismatchScore;
	mat_['b']['b'] = mismatchScore;
	mat_['B']['D'] = mismatchScore;
	mat_['B']['d'] = mismatchScore;
	mat_['b']['D'] = mismatchScore;
	mat_['b']['d'] = mismatchScore;
	mat_['B']['H'] = mismatchScore;
	mat_['B']['h'] = mismatchScore;
	mat_['b']['H'] = mismatchScore;
	mat_['b']['h'] = mismatchScore;
	mat_['B']['V'] = mismatchScore;
	mat_['B']['v'] = mismatchScore;
	mat_['b']['V'] = mismatchScore;
	mat_['b']['v'] = mismatchScore;
	mat_['S']['G'] = matchScore;
	mat_['S']['g'] = matchScore;
	mat_['s']['G'] = matchScore;
	mat_['s']['g'] = matchScore;
	mat_['S']['C'] = matchScore;
	mat_['S']['c'] = matchScore;
	mat_['s']['C'] = matchScore;
	mat_['s']['c'] = matchScore;
	mat_['S']['B'] = matchScore;
	mat_['S']['b'] = matchScore;
	mat_['s']['B'] = matchScore;
	mat_['s']['b'] = matchScore;
	mat_['S']['V'] = matchScore;
	mat_['S']['v'] = matchScore;
	mat_['s']['V'] = matchScore;
	mat_['s']['v'] = matchScore;
	mat_['S']['N'] = matchScore;
	mat_['S']['n'] = matchScore;
	mat_['s']['N'] = matchScore;
	mat_['s']['n'] = matchScore;
	mat_['S']['A'] = mismatchScore;
	mat_['S']['a'] = mismatchScore;
	mat_['s']['A'] = mismatchScore;
	mat_['s']['a'] = mismatchScore;
	mat_['S']['T'] = mismatchScore;
	mat_['S']['t'] = mismatchScore;
	mat_['s']['T'] = mismatchScore;
	mat_['s']['t'] = mismatchScore;
	mat_['S']['W'] = mismatchScore;
	mat_['S']['w'] = mismatchScore;
	mat_['s']['W'] = mismatchScore;
	mat_['s']['w'] = mismatchScore;
	mat_['S']['S'] = mismatchScore;
	mat_['S']['s'] = mismatchScore;
	mat_['s']['S'] = mismatchScore;
	mat_['s']['s'] = mismatchScore;
	mat_['S']['M'] = mismatchScore;
	mat_['S']['m'] = mismatchScore;
	mat_['s']['M'] = mismatchScore;
	mat_['s']['m'] = mismatchScore;
	mat_['S']['K'] = mismatchScore;
	mat_['S']['k'] = mismatchScore;
	mat_['s']['K'] = mismatchScore;
	mat_['s']['k'] = mismatchScore;
	mat_['S']['R'] = mismatchScore;
	mat_['S']['r'] = mismatchScore;
	mat_['s']['R'] = mismatchScore;
	mat_['s']['r'] = mismatchScore;
	mat_['S']['Y'] = mismatchScore;
	mat_['S']['y'] = mismatchScore;
	mat_['s']['Y'] = mismatchScore;
	mat_['s']['y'] = mismatchScore;
	mat_['S']['D'] = mismatchScore;
	mat_['S']['d'] = mismatchScore;
	mat_['s']['D'] = mismatchScore;
	mat_['s']['d'] = mismatchScore;
	mat_['S']['H'] = mismatchScore;
	mat_['S']['h'] = mismatchScore;
	mat_['s']['H'] = mismatchScore;
	mat_['s']['h'] = mismatchScore;
	mat_['W']['A'] = matchScore;
	mat_['W']['a'] = matchScore;
	mat_['w']['A'] = matchScore;
	mat_['w']['a'] = matchScore;
	mat_['W']['T'] = matchScore;
	mat_['W']['t'] = matchScore;
	mat_['w']['T'] = matchScore;
	mat_['w']['t'] = matchScore;
	mat_['W']['D'] = matchScore;
	mat_['W']['d'] = matchScore;
	mat_['w']['D'] = matchScore;
	mat_['w']['d'] = matchScore;
	mat_['W']['H'] = matchScore;
	mat_['W']['h'] = matchScore;
	mat_['w']['H'] = matchScore;
	mat_['w']['h'] = matchScore;
	mat_['W']['N'] = matchScore;
	mat_['W']['n'] = matchScore;
	mat_['w']['N'] = matchScore;
	mat_['w']['n'] = matchScore;
	mat_['W']['C'] = mismatchScore;
	mat_['W']['c'] = mismatchScore;
	mat_['w']['C'] = mismatchScore;
	mat_['w']['c'] = mismatchScore;
	mat_['W']['G'] = mismatchScore;
	mat_['W']['g'] = mismatchScore;
	mat_['w']['G'] = mismatchScore;
	mat_['w']['g'] = mismatchScore;
	mat_['W']['W'] = mismatchScore;
	mat_['W']['w'] = mismatchScore;
	mat_['w']['W'] = mismatchScore;
	mat_['w']['w'] = mismatchScore;
	mat_['W']['S'] = mismatchScore;
	mat_['W']['s'] = mismatchScore;
	mat_['w']['S'] = mismatchScore;
	mat_['w']['s'] = mismatchScore;
	mat_['W']['M'] = mismatchScore;
	mat_['W']['m'] = mismatchScore;
	mat_['w']['M'] = mismatchScore;
	mat_['w']['m'] = mismatchScore;
	mat_['W']['K'] = mismatchScore;
	mat_['W']['k'] = mismatchScore;
	mat_['w']['K'] = mismatchScore;
	mat_['w']['k'] = mismatchScore;
	mat_['W']['R'] = mismatchScore;
	mat_['W']['r'] = mismatchScore;
	mat_['w']['R'] = mismatchScore;
	mat_['w']['r'] = mismatchScore;
	mat_['W']['Y'] = mismatchScore;
	mat_['W']['y'] = mismatchScore;
	mat_['w']['Y'] = mismatchScore;
	mat_['w']['y'] = mismatchScore;
	mat_['W']['B'] = mismatchScore;
	mat_['W']['b'] = mismatchScore;
	mat_['w']['B'] = mismatchScore;
	mat_['w']['b'] = mismatchScore;
	mat_['W']['V'] = mismatchScore;
	mat_['W']['v'] = mismatchScore;
	mat_['w']['V'] = mismatchScore;
	mat_['w']['v'] = mismatchScore;
	mat_['G']['G'] = matchScore;
	mat_['G']['g'] = matchScore;
	mat_['g']['G'] = matchScore;
	mat_['g']['g'] = matchScore;
	mat_['G']['S'] = matchScore;
	mat_['G']['s'] = matchScore;
	mat_['g']['S'] = matchScore;
	mat_['g']['s'] = matchScore;
	mat_['G']['K'] = matchScore;
	mat_['G']['k'] = matchScore;
	mat_['g']['K'] = matchScore;
	mat_['g']['k'] = matchScore;
	mat_['G']['R'] = matchScore;
	mat_['G']['r'] = matchScore;
	mat_['g']['R'] = matchScore;
	mat_['g']['r'] = matchScore;
	mat_['G']['B'] = matchScore;
	mat_['G']['b'] = matchScore;
	mat_['g']['B'] = matchScore;
	mat_['g']['b'] = matchScore;
	mat_['G']['D'] = matchScore;
	mat_['G']['d'] = matchScore;
	mat_['g']['D'] = matchScore;
	mat_['g']['d'] = matchScore;
	mat_['G']['V'] = matchScore;
	mat_['G']['v'] = matchScore;
	mat_['g']['V'] = matchScore;
	mat_['g']['v'] = matchScore;
	mat_['G']['N'] = matchScore;
	mat_['G']['n'] = matchScore;
	mat_['g']['N'] = matchScore;
	mat_['g']['n'] = matchScore;
	mat_['G']['A'] = mismatchScore;
	mat_['G']['a'] = mismatchScore;
	mat_['g']['A'] = mismatchScore;
	mat_['g']['a'] = mismatchScore;
	mat_['G']['C'] = mismatchScore;
	mat_['G']['c'] = mismatchScore;
	mat_['g']['C'] = mismatchScore;
	mat_['g']['c'] = mismatchScore;
	mat_['G']['T'] = mismatchScore;
	mat_['G']['t'] = mismatchScore;
	mat_['g']['T'] = mismatchScore;
	mat_['g']['t'] = mismatchScore;
	mat_['G']['W'] = mismatchScore;
	mat_['G']['w'] = mismatchScore;
	mat_['g']['W'] = mismatchScore;
	mat_['g']['w'] = mismatchScore;
	mat_['G']['M'] = mismatchScore;
	mat_['G']['m'] = mismatchScore;
	mat_['g']['M'] = mismatchScore;
	mat_['g']['m'] = mismatchScore;
	mat_['G']['Y'] = mismatchScore;
	mat_['G']['y'] = mismatchScore;
	mat_['g']['Y'] = mismatchScore;
	mat_['g']['y'] = mismatchScore;
	mat_['G']['H'] = mismatchScore;
	mat_['G']['h'] = mismatchScore;
	mat_['g']['H'] = mismatchScore;
	mat_['g']['h'] = mismatchScore;
	mat_['T']['T'] = matchScore;
	mat_['T']['t'] = matchScore;
	mat_['t']['T'] = matchScore;
	mat_['t']['t'] = matchScore;
	mat_['T']['W'] = matchScore;
	mat_['T']['w'] = matchScore;
	mat_['t']['W'] = matchScore;
	mat_['t']['w'] = matchScore;
	mat_['T']['K'] = matchScore;
	mat_['T']['k'] = matchScore;
	mat_['t']['K'] = matchScore;
	mat_['t']['k'] = matchScore;
	mat_['T']['Y'] = matchScore;
	mat_['T']['y'] = matchScore;
	mat_['t']['Y'] = matchScore;
	mat_['t']['y'] = matchScore;
	mat_['T']['B'] = matchScore;
	mat_['T']['b'] = matchScore;
	mat_['t']['B'] = matchScore;
	mat_['t']['b'] = matchScore;
	mat_['T']['D'] = matchScore;
	mat_['T']['d'] = matchScore;
	mat_['t']['D'] = matchScore;
	mat_['t']['d'] = matchScore;
	mat_['T']['H'] = matchScore;
	mat_['T']['h'] = matchScore;
	mat_['t']['H'] = matchScore;
	mat_['t']['h'] = matchScore;
	mat_['T']['N'] = matchScore;
	mat_['T']['n'] = matchScore;
	mat_['t']['N'] = matchScore;
	mat_['t']['n'] = matchScore;
	mat_['T']['A'] = mismatchScore;
	mat_['T']['a'] = mismatchScore;
	mat_['t']['A'] = mismatchScore;
	mat_['t']['a'] = mismatchScore;
	mat_['T']['C'] = mismatchScore;
	mat_['T']['c'] = mismatchScore;
	mat_['t']['C'] = mismatchScore;
	mat_['t']['c'] = mismatchScore;
	mat_['T']['G'] = mismatchScore;
	mat_['T']['g'] = mismatchScore;
	mat_['t']['G'] = mismatchScore;
	mat_['t']['g'] = mismatchScore;
	mat_['T']['S'] = mismatchScore;
	mat_['T']['s'] = mismatchScore;
	mat_['t']['S'] = mismatchScore;
	mat_['t']['s'] = mismatchScore;
	mat_['T']['M'] = mismatchScore;
	mat_['T']['m'] = mismatchScore;
	mat_['t']['M'] = mismatchScore;
	mat_['t']['m'] = mismatchScore;
	mat_['T']['R'] = mismatchScore;
	mat_['T']['r'] = mismatchScore;
	mat_['t']['R'] = mismatchScore;
	mat_['t']['r'] = mismatchScore;
	mat_['T']['V'] = mismatchScore;
	mat_['T']['v'] = mismatchScore;
	mat_['t']['V'] = mismatchScore;
	mat_['t']['v'] = mismatchScore;
	mat_['C']['C'] = matchScore;
	mat_['C']['c'] = matchScore;
	mat_['c']['C'] = matchScore;
	mat_['c']['c'] = matchScore;
	mat_['C']['S'] = matchScore;
	mat_['C']['s'] = matchScore;
	mat_['c']['S'] = matchScore;
	mat_['c']['s'] = matchScore;
	mat_['C']['M'] = matchScore;
	mat_['C']['m'] = matchScore;
	mat_['c']['M'] = matchScore;
	mat_['c']['m'] = matchScore;
	mat_['C']['Y'] = matchScore;
	mat_['C']['y'] = matchScore;
	mat_['c']['Y'] = matchScore;
	mat_['c']['y'] = matchScore;
	mat_['C']['B'] = matchScore;
	mat_['C']['b'] = matchScore;
	mat_['c']['B'] = matchScore;
	mat_['c']['b'] = matchScore;
	mat_['C']['H'] = matchScore;
	mat_['C']['h'] = matchScore;
	mat_['c']['H'] = matchScore;
	mat_['c']['h'] = matchScore;
	mat_['C']['V'] = matchScore;
	mat_['C']['v'] = matchScore;
	mat_['c']['V'] = matchScore;
	mat_['c']['v'] = matchScore;
	mat_['C']['N'] = matchScore;
	mat_['C']['n'] = matchScore;
	mat_['c']['N'] = matchScore;
	mat_['c']['n'] = matchScore;
	mat_['C']['A'] = mismatchScore;
	mat_['C']['a'] = mismatchScore;
	mat_['c']['A'] = mismatchScore;
	mat_['c']['a'] = mismatchScore;
	mat_['C']['G'] = mismatchScore;
	mat_['C']['g'] = mismatchScore;
	mat_['c']['G'] = mismatchScore;
	mat_['c']['g'] = mismatchScore;
	mat_['C']['T'] = mismatchScore;
	mat_['C']['t'] = mismatchScore;
	mat_['c']['T'] = mismatchScore;
	mat_['c']['t'] = mismatchScore;
	mat_['C']['W'] = mismatchScore;
	mat_['C']['w'] = mismatchScore;
	mat_['c']['W'] = mismatchScore;
	mat_['c']['w'] = mismatchScore;
	mat_['C']['K'] = mismatchScore;
	mat_['C']['k'] = mismatchScore;
	mat_['c']['K'] = mismatchScore;
	mat_['c']['k'] = mismatchScore;
	mat_['C']['R'] = mismatchScore;
	mat_['C']['r'] = mismatchScore;
	mat_['c']['R'] = mismatchScore;
	mat_['c']['r'] = mismatchScore;
	mat_['C']['D'] = mismatchScore;
	mat_['C']['d'] = mismatchScore;
	mat_['c']['D'] = mismatchScore;
	mat_['c']['d'] = mismatchScore;
	mat_['R']['A'] = matchScore;
	mat_['R']['a'] = matchScore;
	mat_['r']['A'] = matchScore;
	mat_['r']['a'] = matchScore;
	mat_['R']['G'] = matchScore;
	mat_['R']['g'] = matchScore;
	mat_['r']['G'] = matchScore;
	mat_['r']['g'] = matchScore;
	mat_['R']['D'] = matchScore;
	mat_['R']['d'] = matchScore;
	mat_['r']['D'] = matchScore;
	mat_['r']['d'] = matchScore;
	mat_['R']['V'] = matchScore;
	mat_['R']['v'] = matchScore;
	mat_['r']['V'] = matchScore;
	mat_['r']['v'] = matchScore;
	mat_['R']['N'] = matchScore;
	mat_['R']['n'] = matchScore;
	mat_['r']['N'] = matchScore;
	mat_['r']['n'] = matchScore;
	mat_['R']['C'] = mismatchScore;
	mat_['R']['c'] = mismatchScore;
	mat_['r']['C'] = mismatchScore;
	mat_['r']['c'] = mismatchScore;
	mat_['R']['T'] = mismatchScore;
	mat_['R']['t'] = mismatchScore;
	mat_['r']['T'] = mismatchScore;
	mat_['r']['t'] = mismatchScore;
	mat_['R']['W'] = mismatchScore;
	mat_['R']['w'] = mismatchScore;
	mat_['r']['W'] = mismatchScore;
	mat_['r']['w'] = mismatchScore;
	mat_['R']['S'] = mismatchScore;
	mat_['R']['s'] = mismatchScore;
	mat_['r']['S'] = mismatchScore;
	mat_['r']['s'] = mismatchScore;
	mat_['R']['M'] = mismatchScore;
	mat_['R']['m'] = mismatchScore;
	mat_['r']['M'] = mismatchScore;
	mat_['r']['m'] = mismatchScore;
	mat_['R']['K'] = mismatchScore;
	mat_['R']['k'] = mismatchScore;
	mat_['r']['K'] = mismatchScore;
	mat_['r']['k'] = mismatchScore;
	mat_['R']['R'] = mismatchScore;
	mat_['R']['r'] = mismatchScore;
	mat_['r']['R'] = mismatchScore;
	mat_['r']['r'] = mismatchScore;
	mat_['R']['Y'] = mismatchScore;
	mat_['R']['y'] = mismatchScore;
	mat_['r']['Y'] = mismatchScore;
	mat_['r']['y'] = mismatchScore;
	mat_['R']['B'] = mismatchScore;
	mat_['R']['b'] = mismatchScore;
	mat_['r']['B'] = mismatchScore;
	mat_['r']['b'] = mismatchScore;
	mat_['R']['H'] = mismatchScore;
	mat_['R']['h'] = mismatchScore;
	mat_['r']['H'] = mismatchScore;
	mat_['r']['h'] = mismatchScore;
	mat_['A']['A'] = matchScore;
	mat_['A']['a'] = matchScore;
	mat_['a']['A'] = matchScore;
	mat_['a']['a'] = matchScore;
	mat_['A']['W'] = matchScore;
	mat_['A']['w'] = matchScore;
	mat_['a']['W'] = matchScore;
	mat_['a']['w'] = matchScore;
	mat_['A']['M'] = matchScore;
	mat_['A']['m'] = matchScore;
	mat_['a']['M'] = matchScore;
	mat_['a']['m'] = matchScore;
	mat_['A']['R'] = matchScore;
	mat_['A']['r'] = matchScore;
	mat_['a']['R'] = matchScore;
	mat_['a']['r'] = matchScore;
	mat_['A']['D'] = matchScore;
	mat_['A']['d'] = matchScore;
	mat_['a']['D'] = matchScore;
	mat_['a']['d'] = matchScore;
	mat_['A']['H'] = matchScore;
	mat_['A']['h'] = matchScore;
	mat_['a']['H'] = matchScore;
	mat_['a']['h'] = matchScore;
	mat_['A']['V'] = matchScore;
	mat_['A']['v'] = matchScore;
	mat_['a']['V'] = matchScore;
	mat_['a']['v'] = matchScore;
	mat_['A']['N'] = matchScore;
	mat_['A']['n'] = matchScore;
	mat_['a']['N'] = matchScore;
	mat_['a']['n'] = matchScore;
	mat_['A']['C'] = mismatchScore;
	mat_['A']['c'] = mismatchScore;
	mat_['a']['C'] = mismatchScore;
	mat_['a']['c'] = mismatchScore;
	mat_['A']['G'] = mismatchScore;
	mat_['A']['g'] = mismatchScore;
	mat_['a']['G'] = mismatchScore;
	mat_['a']['g'] = mismatchScore;
	mat_['A']['T'] = mismatchScore;
	mat_['A']['t'] = mismatchScore;
	mat_['a']['T'] = mismatchScore;
	mat_['a']['t'] = mismatchScore;
	mat_['A']['S'] = mismatchScore;
	mat_['A']['s'] = mismatchScore;
	mat_['a']['S'] = mismatchScore;
	mat_['a']['s'] = mismatchScore;
	mat_['A']['K'] = mismatchScore;
	mat_['A']['k'] = mismatchScore;
	mat_['a']['K'] = mismatchScore;
	mat_['a']['k'] = mismatchScore;
	mat_['A']['Y'] = mismatchScore;
	mat_['A']['y'] = mismatchScore;
	mat_['a']['Y'] = mismatchScore;
	mat_['a']['y'] = mismatchScore;
	mat_['A']['B'] = mismatchScore;
	mat_['A']['b'] = mismatchScore;
	mat_['a']['B'] = mismatchScore;
	mat_['a']['b'] = mismatchScore;
}
void substituteMatrix::setWithDegenScoring(int32_t matchScore, int32_t mismatchScore){
	setWithZeros();
	mat_['N']['A'] = matchScore;
	mat_['N']['C'] = matchScore;
	mat_['N']['G'] = matchScore;
	mat_['N']['T'] = matchScore;
	mat_['N']['N'] = matchScore;
	mat_['N']['W'] = matchScore;
	mat_['N']['S'] = matchScore;
	mat_['N']['M'] = matchScore;
	mat_['N']['K'] = matchScore;
	mat_['N']['R'] = matchScore;
	mat_['N']['Y'] = matchScore;
	mat_['N']['B'] = matchScore;
	mat_['N']['D'] = matchScore;
	mat_['N']['H'] = matchScore;
	mat_['N']['V'] = matchScore;
	mat_['V']['A'] = matchScore;
	mat_['V']['C'] = matchScore;
	mat_['V']['G'] = matchScore;
	mat_['V']['N'] = matchScore;
	mat_['V']['T'] = mismatchScore;
	mat_['V']['W'] = mismatchScore;
	mat_['V']['S'] = mismatchScore;
	mat_['V']['M'] = mismatchScore;
	mat_['V']['K'] = mismatchScore;
	mat_['V']['R'] = mismatchScore;
	mat_['V']['Y'] = mismatchScore;
	mat_['V']['B'] = mismatchScore;
	mat_['V']['D'] = mismatchScore;
	mat_['V']['H'] = mismatchScore;
	mat_['V']['V'] = mismatchScore;
	mat_['D']['A'] = matchScore;
	mat_['D']['G'] = matchScore;
	mat_['D']['T'] = matchScore;
	mat_['D']['N'] = matchScore;
	mat_['D']['C'] = mismatchScore;
	mat_['D']['W'] = mismatchScore;
	mat_['D']['S'] = mismatchScore;
	mat_['D']['M'] = mismatchScore;
	mat_['D']['K'] = mismatchScore;
	mat_['D']['R'] = mismatchScore;
	mat_['D']['Y'] = mismatchScore;
	mat_['D']['B'] = mismatchScore;
	mat_['D']['D'] = mismatchScore;
	mat_['D']['H'] = mismatchScore;
	mat_['D']['V'] = mismatchScore;
	mat_['H']['A'] = matchScore;
	mat_['H']['C'] = matchScore;
	mat_['H']['T'] = matchScore;
	mat_['H']['N'] = matchScore;
	mat_['H']['G'] = mismatchScore;
	mat_['H']['W'] = mismatchScore;
	mat_['H']['S'] = mismatchScore;
	mat_['H']['M'] = mismatchScore;
	mat_['H']['K'] = mismatchScore;
	mat_['H']['R'] = mismatchScore;
	mat_['H']['Y'] = mismatchScore;
	mat_['H']['B'] = mismatchScore;
	mat_['H']['D'] = mismatchScore;
	mat_['H']['H'] = mismatchScore;
	mat_['H']['V'] = mismatchScore;
	mat_['Y']['C'] = matchScore;
	mat_['Y']['T'] = matchScore;
	mat_['Y']['B'] = matchScore;
	mat_['Y']['H'] = matchScore;
	mat_['Y']['N'] = matchScore;
	mat_['Y']['A'] = mismatchScore;
	mat_['Y']['G'] = mismatchScore;
	mat_['Y']['W'] = mismatchScore;
	mat_['Y']['S'] = mismatchScore;
	mat_['Y']['M'] = mismatchScore;
	mat_['Y']['K'] = mismatchScore;
	mat_['Y']['R'] = mismatchScore;
	mat_['Y']['Y'] = mismatchScore;
	mat_['Y']['D'] = mismatchScore;
	mat_['Y']['V'] = mismatchScore;
	mat_['K']['G'] = matchScore;
	mat_['K']['T'] = matchScore;
	mat_['K']['B'] = matchScore;
	mat_['K']['D'] = matchScore;
	mat_['K']['N'] = matchScore;
	mat_['K']['A'] = mismatchScore;
	mat_['K']['C'] = mismatchScore;
	mat_['K']['W'] = mismatchScore;
	mat_['K']['S'] = mismatchScore;
	mat_['K']['M'] = mismatchScore;
	mat_['K']['K'] = mismatchScore;
	mat_['K']['R'] = mismatchScore;
	mat_['K']['Y'] = mismatchScore;
	mat_['K']['H'] = mismatchScore;
	mat_['K']['V'] = mismatchScore;
	mat_['M']['A'] = matchScore;
	mat_['M']['C'] = matchScore;
	mat_['M']['H'] = matchScore;
	mat_['M']['V'] = matchScore;
	mat_['M']['N'] = matchScore;
	mat_['M']['G'] = mismatchScore;
	mat_['M']['T'] = mismatchScore;
	mat_['M']['W'] = mismatchScore;
	mat_['M']['S'] = mismatchScore;
	mat_['M']['M'] = mismatchScore;
	mat_['M']['K'] = mismatchScore;
	mat_['M']['R'] = mismatchScore;
	mat_['M']['Y'] = mismatchScore;
	mat_['M']['B'] = mismatchScore;
	mat_['M']['D'] = mismatchScore;
	mat_['B']['C'] = matchScore;
	mat_['B']['G'] = matchScore;
	mat_['B']['T'] = matchScore;
	mat_['B']['N'] = matchScore;
	mat_['B']['A'] = mismatchScore;
	mat_['B']['W'] = mismatchScore;
	mat_['B']['S'] = mismatchScore;
	mat_['B']['M'] = mismatchScore;
	mat_['B']['K'] = mismatchScore;
	mat_['B']['R'] = mismatchScore;
	mat_['B']['Y'] = mismatchScore;
	mat_['B']['B'] = mismatchScore;
	mat_['B']['D'] = mismatchScore;
	mat_['B']['H'] = mismatchScore;
	mat_['B']['V'] = mismatchScore;
	mat_['S']['G'] = matchScore;
	mat_['S']['C'] = matchScore;
	mat_['S']['B'] = matchScore;
	mat_['S']['V'] = matchScore;
	mat_['S']['N'] = matchScore;
	mat_['S']['A'] = mismatchScore;
	mat_['S']['T'] = mismatchScore;
	mat_['S']['W'] = mismatchScore;
	mat_['S']['S'] = mismatchScore;
	mat_['S']['M'] = mismatchScore;
	mat_['S']['K'] = mismatchScore;
	mat_['S']['R'] = mismatchScore;
	mat_['S']['Y'] = mismatchScore;
	mat_['S']['D'] = mismatchScore;
	mat_['S']['H'] = mismatchScore;
	mat_['W']['A'] = matchScore;
	mat_['W']['T'] = matchScore;
	mat_['W']['D'] = matchScore;
	mat_['W']['H'] = matchScore;
	mat_['W']['N'] = matchScore;
	mat_['W']['C'] = mismatchScore;
	mat_['W']['G'] = mismatchScore;
	mat_['W']['W'] = mismatchScore;
	mat_['W']['S'] = mismatchScore;
	mat_['W']['M'] = mismatchScore;
	mat_['W']['K'] = mismatchScore;
	mat_['W']['R'] = mismatchScore;
	mat_['W']['Y'] = mismatchScore;
	mat_['W']['B'] = mismatchScore;
	mat_['W']['V'] = mismatchScore;
	mat_['G']['G'] = matchScore;
	mat_['G']['S'] = matchScore;
	mat_['G']['K'] = matchScore;
	mat_['G']['R'] = matchScore;
	mat_['G']['B'] = matchScore;
	mat_['G']['D'] = matchScore;
	mat_['G']['V'] = matchScore;
	mat_['G']['N'] = matchScore;
	mat_['G']['A'] = mismatchScore;
	mat_['G']['C'] = mismatchScore;
	mat_['G']['T'] = mismatchScore;
	mat_['G']['W'] = mismatchScore;
	mat_['G']['M'] = mismatchScore;
	mat_['G']['Y'] = mismatchScore;
	mat_['G']['H'] = mismatchScore;
	mat_['T']['T'] = matchScore;
	mat_['T']['W'] = matchScore;
	mat_['T']['K'] = matchScore;
	mat_['T']['Y'] = matchScore;
	mat_['T']['B'] = matchScore;
	mat_['T']['D'] = matchScore;
	mat_['T']['H'] = matchScore;
	mat_['T']['N'] = matchScore;
	mat_['T']['A'] = mismatchScore;
	mat_['T']['C'] = mismatchScore;
	mat_['T']['G'] = mismatchScore;
	mat_['T']['S'] = mismatchScore;
	mat_['T']['M'] = mismatchScore;
	mat_['T']['R'] = mismatchScore;
	mat_['T']['V'] = mismatchScore;
	mat_['C']['C'] = matchScore;
	mat_['C']['S'] = matchScore;
	mat_['C']['M'] = matchScore;
	mat_['C']['Y'] = matchScore;
	mat_['C']['B'] = matchScore;
	mat_['C']['H'] = matchScore;
	mat_['C']['V'] = matchScore;
	mat_['C']['N'] = matchScore;
	mat_['C']['A'] = mismatchScore;
	mat_['C']['G'] = mismatchScore;
	mat_['C']['T'] = mismatchScore;
	mat_['C']['W'] = mismatchScore;
	mat_['C']['K'] = mismatchScore;
	mat_['C']['R'] = mismatchScore;
	mat_['C']['D'] = mismatchScore;
	mat_['R']['A'] = matchScore;
	mat_['R']['G'] = matchScore;
	mat_['R']['D'] = matchScore;
	mat_['R']['V'] = matchScore;
	mat_['R']['N'] = matchScore;
	mat_['R']['C'] = mismatchScore;
	mat_['R']['T'] = mismatchScore;
	mat_['R']['W'] = mismatchScore;
	mat_['R']['S'] = mismatchScore;
	mat_['R']['M'] = mismatchScore;
	mat_['R']['K'] = mismatchScore;
	mat_['R']['R'] = mismatchScore;
	mat_['R']['Y'] = mismatchScore;
	mat_['R']['B'] = mismatchScore;
	mat_['R']['H'] = mismatchScore;
	mat_['A']['A'] = matchScore;
	mat_['A']['W'] = matchScore;
	mat_['A']['M'] = matchScore;
	mat_['A']['R'] = matchScore;
	mat_['A']['D'] = matchScore;
	mat_['A']['H'] = matchScore;
	mat_['A']['V'] = matchScore;
	mat_['A']['N'] = matchScore;
	mat_['A']['C'] = mismatchScore;
	mat_['A']['G'] = mismatchScore;
	mat_['A']['T'] = mismatchScore;
	mat_['A']['S'] = mismatchScore;
	mat_['A']['K'] = mismatchScore;
	mat_['A']['Y'] = mismatchScore;
	mat_['A']['B'] = mismatchScore;
}
void substituteMatrix::setWithFilename(const std::string & filename){
  auto matchMatrixScoresMap = seqUtil::readScoringMatrix(filename);
  setWithUnoMap(matchMatrixScoresMap);
}
void substituteMatrix::printScores(const std::vector<char> & alphabet,
		std::ostream & out)const{
	VecStr head = {"let"};
	VecStr alphStr (alphabet.size());
	std::transform(alphabet.begin(), alphabet.end(), alphStr.begin(),
			[&](const char & c){return to_string(c);});
	addOtherVec(head, alphStr);
	std::vector<VecStr> outContent;
	for(const auto & let : alphabet){
		VecStr currentRow = {to_string(let)};
		for(const auto & secondLet : alphabet){
			currentRow.emplace_back(to_string(mat_[let][secondLet]));
		}
		outContent.emplace_back(currentRow);
	}
	printTableOrganized(outContent, head, out);
}

void substituteMatrix::printScores(std::ostream & out)const{
	VecStr head = {"let"};
	auto alphabet = determineLetters();
	VecStr alphStr (alphabet.size());
	std::transform(alphabet.begin(), alphabet.end(), alphStr.begin(), [&](const char & c){return to_string(c);});
	addOtherVec(head, alphStr);
	std::vector<VecStr> outContent;
	for(const auto & let : alphabet){
		VecStr currentRow = {to_string(let)};
		for(const auto & secondLet : alphabet){
			currentRow.emplace_back(to_string(mat_[let][secondLet]));
		}
		outContent.emplace_back(currentRow);
	}
	printTableOrganized(outContent, head, out);
}

substituteMatrix substituteMatrix::createDegenScoreMatrix(int32_t matchScore, int32_t mismatchScore){
	substituteMatrix degen;
	degen.setWithDegenScoring(matchScore, mismatchScore);
	return degen;
}
substituteMatrix substituteMatrix::createDegenScoreMatrixCaseInsensitive(int32_t matchScore, int32_t mismatchScore){
	substituteMatrix degen;
	degen.setWithDegenScoringCaseInsen(matchScore, mismatchScore);
	return degen;
}
substituteMatrix substituteMatrix::createDegenScoreMatrixLessN(){
	substituteMatrix degen;
	degen.setWithDegenScoringLessN();
	return degen;
}

substituteMatrix substituteMatrix::createScoreMatrix(int32_t matchScore, int32_t mismatchScore,
			bool degenerativeScoring, bool caseInsensitive){
  substituteMatrix scoring;
  if(degenerativeScoring){
  	if(caseInsensitive){
  		scoring	= createDegenScoreMatrixCaseInsensitive(matchScore, mismatchScore);
  	}else{
  		scoring = createDegenScoreMatrix(matchScore, mismatchScore);
  	}
  }else{
  	if(caseInsensitive){
  		scoring.setWithCaseInsensitive(matchScore, mismatchScore);
  	}else{
  		scoring.setWithSimple(matchScore, mismatchScore);
  	}
  }
  return scoring;
}

} /* namespace bib */
